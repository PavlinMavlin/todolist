{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","AddItemForm.tsx","EditTableSpan.tsx","Task.tsx","store/tasks-reducer.ts","Todolist.tsx","store/todolists-reducer.ts","AppWithRedux.tsx","store/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","key","helperText","label","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","changeTitle","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todolistApi","get","post","todolistId","delete","put","taskAPI","taskId","model","Task","task","todoListID","removeTask","changeTaskTitle","changeTaskStatus","onClickHandler","useCallback","id","onChangeHandler","checked","Completed","New","onTitleChangeHandler","className","status","Checkbox","Delete","initialState","Todolist","dispatch","useDispatch","useEffect","then","res","tasks","data","items","type","setTasksAC","tasksJSXElements","filter","t","getTasksForTodoList","map","onClickAllFilter","changeFilter","onClickActiveFilter","onClickACompletedFilter","addTask","changeTodolistTitle","removeTodoList","style","listStyle","paddingLeft","Button","size","marginLeft","AppWithRedux","todoList","useSelector","state","todolists","todos","newTitle","taskID","getState","find","startDate","priority","description","deadline","changeTaskTitleAC","item","addTaskAC","addTaskTC","action","changeTaskStatusAC","updateTaskStatusTC","removeTaskAC","removeTaskTC","changeTodolistFilterAC","addTodoList","addTodoListAC","addTodolistTC","changeTodolistTitleAC","changeTodoListTitleTC","todolistComponents","tl","Grid","Paper","elevation","padding","AppBar","position","Toolbar","justifyContent","Menu","Typography","Container","fixed","container","spacing","rootReducer","combineReducers","stateCopy","forEach","todoListId","newTasks","copyState","newTodolist","addedDate","order","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.1853ff08.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'b5f63428-88b9-4342-8c9b-16d46fb30269'\r\n    }\r\n})\r\n\r\n\r\ntype CommonResponseTodolistType<T = {}> = {\r\n    resultCode: number\r\n    fieldsErrors: string[]\r\n    messages: string[]\r\n    data: T\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\n\r\nexport const todolistApi = {\r\n    getTodos() {\r\n        return instance.get<Array<TodolistType>>('todo-lists')\r\n    },\r\n    createTodo(title: string) {\r\n        return instance.post<CommonResponseTodolistType<{ item: TodolistType }>>('todo-lists', {title})\r\n    },\r\n    deleteTodo(todolistId: string) {\r\n        return instance.delete<CommonResponseTodolistType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodoTitle(todolistId: string, title: string) {\r\n        return instance.put<CommonResponseTodolistType>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3,\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4,\r\n}\r\n\r\n\r\nexport type TaskType = {\r\n    addedDate: string\r\n    deadline: string\r\n    description: string\r\n    id: string\r\n    order: number\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    status: TaskStatuses\r\n    title: string\r\n    todoListId: string\r\n}\r\n\r\ntype ResponsePostTaskType = {\r\n    data: { item: TaskType }\r\n    totalCount: number\r\n    fieldsErrors: string[]\r\n    messages: string[]\r\n}\r\ntype ResponseGetTaskType = {\r\n    error: null\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n}\r\ntype ResponseDeleteTaskType = {\r\n    data: {}\r\n    fieldsErrors: string[]\r\n    messages: string[]\r\n    resultCode: number\r\n}\r\ntype ResponseUpdateTaskType = {\r\n    data: TaskType\r\n    fieldsErrors: string[]\r\n    messages: string[]\r\n    resultCode: number\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport const taskAPI = {\r\n    getTask(todolistId: string) {\r\n        return instance.get<ResponseGetTaskType>(`/todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<ResponsePostTaskType>(`/todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseDeleteTaskType>(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseUpdateTaskType>(`/todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\n\r\n\r\n  export type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n\r\n\r\n\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n\r\n    }\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n\r\n        if (e.key === \"Enter\") {\r\n            addItem()\r\n        }\r\n    }\r\n    // const errorMessage = error ? <div style={{color: \"red\"}}>Title is required</div> : null\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={\"outlined\"}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                helperText={error}\r\n                label={\"Title\"}\r\n                error={!!error}\r\n            />\r\n            <IconButton color={\"primary\"} onClick={addItem}>\r\n                <AddBox/>\r\n            </IconButton>\r\n            {/*{errorMessage}*/}\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default AddItemForm","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype EditableSpan = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpan) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                color={\"primary\"}\r\n                variant={\"standard\"}\r\n                value={title}\r\n                onChange={onChangeTitle} autoFocus\r\n                onBlur={offEditMode}/>\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n})\r\n\r\n","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {EditableSpan} from \"./EditTableSpan\";\r\nimport {TaskStatuses, TaskType} from \"./api/todolist-api\";\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    removeTask: (taskId: string, todoListID: string) => void\r\n    todoListID: string\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todoListID: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todoListID: string) => void\r\n}\r\n\r\nexport const Task = React.memo(({task, todoListID, removeTask, changeTaskTitle, changeTaskStatus}: TaskPropsType) => {\r\n\r\n    const onClickHandler = useCallback(() => {\r\n        removeTask(task.id, todoListID)\r\n    }, [removeTask, task, todoListID])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => changeTaskStatus(task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New, todoListID), [changeTaskStatus, task, todoListID])\r\n\r\n    const onTitleChangeHandler = useCallback((title: string) =>\r\n        changeTaskTitle(task.id, title, todoListID), [changeTaskTitle, task, todoListID])\r\n\r\n    return (\r\n\r\n        <div key={task.id}>\r\n                 <span className={task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n                <Checkbox\r\n                    color={\"primary\"}\r\n                    checked={task.status===TaskStatuses.Completed}\r\n                    onChange={onChangeHandler}\r\n                /><EditableSpan title={task.title} changeTitle={onTitleChangeHandler}/>\r\n                 </span>\r\n            <IconButton\r\n                onClick={onClickHandler}\r\n            ><Delete/></IconButton>\r\n        </div>)\r\n})","import {taskAPI, TaskStatuses, TaskType, todolistApi} from \"../api/todolist-api\";\r\n\r\nimport {SetTodoListsActionType} from \"./todolists-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {TaskStateType} from \"../AppWithRedux\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\n\r\ntype RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    todolistId: string\r\n    taskID: string\r\n}\r\ntype AddTaskActionType = {\r\n    type: \"ADD-TASK\"\r\n    task: TaskType\r\n}\r\ntype ChangeTaskStatusActionType = {\r\n    type: \"CHANGE-TASK-STATUS\"\r\n    status: TaskStatuses\r\n    todolistId: string\r\n    taskID: string\r\n}\r\ntype ChangeTaskTitleActionType = {\r\n    type: \"CHANGE-TASK-TITLE\"\r\n    title: string\r\n    todolistId: string\r\n    taskID: string\r\n}\r\ntype AddTodolistActionType = {\r\n    type: \"ADD-TODOLIST\"\r\n    title: string\r\n    todoListID: string\r\n}\r\ntype  RemoveTodolistActionType = {\r\n    todolistId: string\r\n    type: \"REMOVE-TODOLIST\"\r\n}\r\ntype SetTasksActionType = {\r\n    type: \"SET-TASKS\",\r\n    todolistId: string\r\n    tasks: Array<TaskType>\r\n}\r\nexport type ActionType =\r\n    RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodoListsActionType\r\n    | SetTasksActionType\r\n\r\n\r\nlet initialState: TaskStateType = {}\r\n\r\n\r\nexport const tasksReducer = (state = initialState, action: ActionType): TaskStateType => {\r\n    switch (action.type) {\r\n        case \"SET-TASKS\": {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todolistId] = action.tasks\r\n            return stateCopy\r\n        }\r\n\r\n        case \"SET-TODOLISTS\": {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        }\r\n        case 'REMOVE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskID)\r\n            }\r\n        case \"ADD-TASK\":\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.task.todoListId]\r\n            const newTasks = [action.task, ...tasks]\r\n            stateCopy[action.task.todoListId] = newTasks\r\n            return stateCopy\r\n        case \"CHANGE-TASK-STATUS\":\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskID ? {\r\n                    ...t,\r\n                    status: action.status\r\n                } : t)\r\n\r\n            }\r\n\r\n        case \"CHANGE-TASK-TITLE\" : {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskID ? {\r\n                    ...t,\r\n                    title: action.title\r\n                } : t)\r\n\r\n            }\r\n\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            return {\r\n                ...state,\r\n                [action.todoListID]: []\r\n            }\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            let copyState = {...state}\r\n            delete copyState[action.todolistId]\r\n            return copyState\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const removeTaskAC = (taskID: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskID, todolistId}\r\n}\r\nexport const addTaskAC = (task: TaskType): AddTaskActionType => {\r\n    return {type: \"ADD-TASK\", task}\r\n}\r\nexport const changeTaskStatusAC = (taskID: string, status: TaskStatuses, todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: \"CHANGE-TASK-STATUS\", taskID, status, todolistId}\r\n}\r\n\r\nexport const changeTaskTitleAC = (taskID: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: \"CHANGE-TASK-TITLE\", title, todolistId, taskID}\r\n}\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return {type: \"REMOVE-TODOLIST\", todolistId}\r\n}\r\nexport const setTasksAC = (todolistId: string, tasks: Array<TaskType>) => {\r\n    return {\r\n        type: \"SET-TASKS\",\r\n        todolistId,\r\n        tasks,\r\n    }\r\n}\r\n\r\nexport const fetchTaskTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    taskAPI.getTask(todolistId)\r\n        .then((res) => {\r\n\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(todolistId, tasks))\r\n        })\r\n}\r\n\r\nexport const removeTaskTC = (taskID: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    taskAPI.deleteTask(todolistId, taskID)\r\n        .then((res) => {\r\n            dispatch(removeTaskAC(taskID, todolistId))\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todoListID: string) => (dispatch: Dispatch) => {\r\n    taskAPI.createTask(todoListID, title)\r\n        .then((res) => {\r\n\r\n            const task = res.data.data.item\r\n            dispatch(addTaskAC(task))\r\n        })\r\n}\r\nexport const updateTaskStatusTC = (taskId: string, todolistId: string, status: TaskStatuses) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n\r\n// так как мы обязаны на сервер отправить все св-ва, которые сервер ожидает, а не только\r\n// те, которые мы хотим обновить, соответственно нам нужно в этом месте взять таску целиком  // чтобы у неё отобрать остальные св-ва\r\n\r\n        const allTasksFromState = getState().tasks;\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find(t => {\r\n            return t.id === taskId\r\n        })\r\n\r\n\r\n        if (task) {\r\n            taskAPI.updateTask(todolistId, taskId, {\r\n                title: task.title,\r\n                startDate: task.startDate,\r\n                priority: task.priority,\r\n                description: task.description,\r\n                deadline: task.deadline,\r\n                status: status\r\n            }).then(() => {\r\n                const action = changeTaskStatusAC(taskId, status, todolistId)\r\n                dispatch(action)\r\n            })\r\n        }\r\n    }\r\n}\r\nexport const changeTaskTitleTC = (taskID: string, title: string, todolistId: string) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n\r\n\r\n    const allTasksFromState = getState().tasks;\r\n    const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n    const task = tasksForCurrentTodolist.find(t => {\r\n        return t.id === taskID\r\n    })\r\n\r\n    if (task) {\r\n        taskAPI.updateTask(todolistId, taskID, {\r\n            title: title,\r\n            startDate: task.startDate,\r\n            priority: task.priority,\r\n            description: task.description,\r\n            deadline: task.deadline,\r\n            status: task.status\r\n        })\r\n            .then((res) => {\r\n                dispatch(changeTaskTitleAC(taskID, title, todolistId))\r\n            })\r\n    }\r\n}\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditTableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task\";\r\nimport {TaskStatuses, TaskType} from \"./api/todolist-api\";\r\nimport {FilterValuesType} from \"./store/todolists-reducer\";\r\nimport {fetchTaskTC} from \"./store/tasks-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n\r\nexport type PropsTypeTodolist = {\r\n    todoListID: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    removeTask: (taskId: string, todoListID: string) => void\r\n    changeFilter: (value: FilterValuesType, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeTodolistTitle: (title: string, todoListID: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todoListID: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todoListID: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsTypeTodolist) => {\r\n        const dispatch = useDispatch()\r\n\r\n        useEffect(() => {\r\n            dispatch(fetchTaskTC(props.todoListID))\r\n        }, [])\r\n\r\n\r\n        const getTasksForTodoList = () => {\r\n            switch (props.filter) {\r\n                case \"active\":\r\n                    return props.tasks.filter(t => t.status === TaskStatuses.New)\r\n                case \"completed\":\r\n                    return props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n                default:\r\n                    return props.tasks\r\n            }\r\n        }\r\n\r\n        let newTasks = getTasksForTodoList()\r\n\r\n        const tasksJSXElements = newTasks.map(t => {\r\n\r\n\r\n            return (\r\n                <Task key={t.id}\r\n                      task={t}\r\n                      todoListID={props.todoListID}\r\n                      changeTaskStatus={props.changeTaskStatus}\r\n                      changeTaskTitle={props.changeTaskTitle}\r\n                      removeTask={props.removeTask}\r\n                />)\r\n        })\r\n\r\n        const onClickAllFilter = useCallback(() => props.changeFilter(\"all\", props.todoListID), [props.changeFilter, props.todoListID])\r\n        const onClickActiveFilter = useCallback(() => props.changeFilter(\"active\", props.todoListID), [props.changeFilter, props.todoListID])\r\n        const onClickACompletedFilter = useCallback(() => props.changeFilter(\"completed\", props.todoListID), [props.changeFilter, props.todoListID])\r\n\r\n        const OnclickRemoveTodoList = () => props.removeTodoList(props.todoListID)\r\n\r\n        const addTask = useCallback((title: string) => {\r\n            props.addTask(title, props.todoListID)\r\n        }, [props.addTask, props.todoListID])\r\n\r\n        const changeTodolistTitle = useCallback((title: string) => props.changeTodolistTitle(title, props.todoListID), [props.changeTodolistTitle, props.todoListID])\r\n\r\n        return (\r\n\r\n            <div>\r\n                <h3>\r\n                    <EditableSpan title={props.title} changeTitle={changeTodolistTitle}/>\r\n                    <IconButton\r\n                        onClick={OnclickRemoveTodoList}>\r\n                        <Delete/>\r\n                    </IconButton>\r\n                </h3>\r\n                <AddItemForm addItem={addTask}/>\r\n\r\n                <ul style={{listStyle: \"none\", paddingLeft: \"0px\"}}>\r\n                    {\r\n                        tasksJSXElements\r\n                    }\r\n                </ul>\r\n\r\n\r\n                <div>\r\n                    <Button size={\"small\"}\r\n                            variant={props.filter === \"all\" ? \"contained\" : \"outlined\"}\r\n                            color={\"primary\"}\r\n                            onClick={onClickAllFilter}>All\r\n                    </Button>\r\n                    <Button style={{marginLeft: \"3px\"}}\r\n                            size={\"small\"}\r\n                            variant={props.filter === \"active\" ? \"contained\" : \"outlined\"}\r\n                            color={\"primary\"}\r\n                            onClick={onClickActiveFilter}>Active\r\n                    </Button>\r\n                    <Button size={\"small\"}\r\n                            variant={props.filter === \"completed\" ? \"contained\" : \"outlined\"}\r\n                            color={\"primary\"}\r\n                            onClick={onClickACompletedFilter}>Completed\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n)\r\n// let taskForTodolist = props.tasks;\r\n// if(props.filter === \"active\") {\r\n//     taskForTodolist = taskForTodolist.filter(t => !t.isDone)\r\n// }\r\n// if(props.filter === \"completed\") {\r\n//     taskForTodolist = taskForTodolist.filter(t => t.isDone)\r\n// }\r\n// const getTasksForTodoList = () => {\r\n//     switch (props.filter) {\r\n//         case \"active\":\r\n//             return props.tasks.filter((t) => !t.isDone)\r\n//         case \"completed\":\r\n//             return props.tasks.filter((t) => t.isDone)\r\n//         default:\r\n//             return props.tasks\r\n//     }\r\n// }\r\n//\r\n// let newTasks = getTasksForTodoList()\r\n\r\n\r\n","import {v1} from \"uuid\";\r\nimport {todolistApi, TodolistType} from \"../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype RemoveTodolistActionType = {\r\n    type: \"REMOVE-TODOLIST\"\r\n    todoListID: string\r\n}\r\ntype AddTodolistActionType = {\r\n    type: \"ADD-TODOLIST\"\r\n    todoListID: string\r\n    title: string\r\n}\r\ntype ChangeTodolistTitleActionType = {\r\n    type: \"CHANGE-TODOLIST-TITLE\"\r\n    title: string\r\n    todoListID: string\r\n}\r\ntype ChangeTodolistFilterActionType = {\r\n    type: \"CHANGE-TODOLIST-FILTER\"\r\n    filter: FilterValuesType\r\n    todoListID: string\r\n}\r\nexport type SetTodoListsActionType = {\r\n    type: \"SET-TODOLISTS\",\r\n    todolists: Array<TodolistType>\r\n}\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\nexport type ActionType =\r\n    RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n    | SetTodoListsActionType\r\n\r\nlet initialState: Array<TodolistDomainType> = []\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport const todoListsReducer = (state = initialState, action: ActionType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case \"SET-TODOLISTS\":\r\n            return action.todolists.map(tl => ({...tl, filter: \"all\"}))\r\n        case \"REMOVE-TODOLIST\":\r\n            return state.filter(tl => tl.id !== action.todoListID)\r\n        case \"ADD-TODOLIST\":\r\n            const newTodolist: TodolistDomainType = {\r\n                id: action.todoListID,\r\n                title: action.title,\r\n                filter: \"all\",\r\n                addedDate: \"\",\r\n                order: 0,\r\n            }\r\n            return [newTodolist, ...state]\r\n        case \"CHANGE-TODOLIST-TITLE\":\r\n            return state.map(tl => tl.id === action.todoListID ? {...tl, title: action.title} : tl)\r\n        case \"CHANGE-TODOLIST-FILTER\":\r\n            return state.map(tl => tl.id === action.todoListID ? {...tl, filter: action.filter} : tl)\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const removeTodoListAC = (todoListID: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', todoListID}\r\n}\r\nexport const addTodoListAC = (title: string, todoListID: string): AddTodolistActionType => {\r\n    return {type: \"ADD-TODOLIST\", title, todoListID}\r\n}\r\nexport const changeTodolistTitleAC = (title: string, todoListID: string): ChangeTodolistTitleActionType => {\r\n    return {type: \"CHANGE-TODOLIST-TITLE\", title: title, todoListID: todoListID}\r\n}\r\n\r\nexport const changeTodolistFilterAC = (filter: FilterValuesType, todoListID: string): ChangeTodolistFilterActionType => {\r\n    return {type: \"CHANGE-TODOLIST-FILTER\", filter: filter, todoListID: todoListID}\r\n}\r\nexport const setTodoAC = (todolists: Array<TodolistType>): SetTodoListsActionType => {\r\n    return {\r\n        type: \"SET-TODOLISTS\",\r\n        todolists,\r\n    }\r\n}\r\n\r\nexport const fetchTodolistTC = () => (dispatch: Dispatch) => {\r\n    todolistApi.getTodos()\r\n        .then((res) => {\r\n            let todos = res.data\r\n            dispatch(setTodoAC(todos))\r\n        })\r\n}\r\n\r\nexport const removeTodoListTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistApi.deleteTodo(todolistId)\r\n        .then(() => {\r\n            dispatch(removeTodoListAC(todolistId))\r\n        })\r\n}\r\n\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch) => {\r\n    todolistApi.createTodo(title)\r\n        .then((res) => {\r\n            debugger\r\n            const todolistId = res.data.data.item.id\r\n            const title = res.data.data.item.title\r\n            if (todolistId) {\r\n                dispatch(addTodoListAC(title, todolistId))\r\n            }\r\n\r\n        })\r\n}\r\nexport const changeTodoListTitleTC = (title: string, todoListID: string) => (dispatch: Dispatch) => {\r\n    todolistApi.updateTodoTitle(todoListID, title)\r\n        .then(() => {\r\n            dispatch(changeTodolistTitleAC(title, todoListID))\r\n        })\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from \"./Todolist\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC, changeTodoListTitleTC,\r\n    addTodolistTC,\r\n    fetchTodolistTC,\r\n    FilterValuesType,\r\n    removeTodoListTC,\r\n    TodolistDomainType\r\n} from \"./store/todolists-reducer\";\r\nimport {addTaskTC, changeTaskTitleTC, removeTaskTC, updateTaskStatusTC} from \"./store/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store/store\";\r\nimport {TaskStatuses, TaskType} from \"./api/todolist-api\";\r\n\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const todoList = useSelector<AppRootStateType, TodolistDomainType[]>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistTC())\r\n\r\n    }, [])\r\n\r\n\r\n    //tasks\r\n    const changeTaskTitle = useCallback((taskId: string, newTitle: string, todoListID: string) => {\r\n        dispatch(changeTaskTitleTC(taskId, newTitle, todoListID))\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todoListID: string) => {\r\n        dispatch(addTaskTC(title, todoListID))\r\n    }, [dispatch])\r\n\r\n    const changeTaskStatus = useCallback((taskId: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskStatusTC(taskId, todolistId, status))\r\n    }, [dispatch])\r\n\r\n    const removeTask = useCallback((taskID: string, todoListID: string) => {\r\n        dispatch(removeTaskTC(taskID, todoListID))\r\n    }, [dispatch])\r\n\r\n//todolist\r\n    const changeFilter = useCallback((value: FilterValuesType, todoListID: string) => {\r\n        dispatch(changeTodolistFilterAC(value, todoListID))\r\n    }, [dispatch])\r\n\r\n    const removeTodoList = useCallback((todoListID: string) => {\r\n        let action = removeTodoListTC(todoListID)\r\n        // dispatchToTasks(action)\r\n        dispatch(action)\r\n\r\n    }, [dispatch])\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        let action = addTodolistTC(title)\r\n        dispatch(action)\r\n\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((title: string, todoListID: string) => {\r\n        dispatch(changeTodoListTitleTC(title, todoListID))\r\n    }, [dispatch])\r\n\r\n\r\n    const todolistComponents = todoList.map(\r\n        tl => {\r\n            return (\r\n                <Grid item key={tl.id}>\r\n                    <Paper elevation={5} style={{padding: \"20px\"}}>\r\n                        <Todolist\r\n                            todoListID={tl.id}\r\n                            removeTask={removeTask}\r\n                            filter={tl.filter}\r\n                            tasks={tasks[tl.id]}\r\n                            title={tl.title}\r\n                            changeFilter={changeFilter}\r\n                            addTask={addTask}\r\n                            changeTaskStatus={changeTaskStatus}\r\n                            removeTodoList={removeTodoList}\r\n                            changeTaskTitle={changeTaskTitle}\r\n                            changeTodolistTitle={changeTodolistTitle}\r\n                        />\r\n                    </Paper>\r\n                </Grid>\r\n            )\r\n        }\r\n    )\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position={\"static\"}>\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton color={\"inherit\"}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={\"h6\"}>\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button variant={\"outlined\"}\r\n                            color={\"inherit\"}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px 0px\"}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todolistComponents}\r\n                </Grid>\r\n            </Container>\r\n        </div>)\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todoListsReducer} from './todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todoListsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from 'react-redux';\r\n\r\nimport {store} from \"./store/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}