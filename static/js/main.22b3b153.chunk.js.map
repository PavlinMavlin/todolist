{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","app/app-reducer.ts","features/TodolistsList/tasks-reducer.ts","features/TodolistsList/todolists-reducer.ts","utils/error-utils.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","todolistId","delete","put","taskId","model","ResponseStatuses","initialState","status","error","setAppErrorAC","type","setAppStatusAC","handleServerNetworkError","dispatch","message","handleServerAppError","data","messages","length","updateTaskTC","domainModel","getState","task","tasks","find","t","id","apiModel","deadline","description","priority","startDate","then","res","resultCode","action","updateTaskAC","catch","err","console","warn","AddItemForm","React","memo","props","useState","setTitle","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","key","helperText","label","disabled","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","changeTitle","onDoubleClick","Task","todoListID","removeTask","changeTaskTitle","changeTaskStatus","onClickHandler","useCallback","onChangeHandler","checked","Completed","New","onTitleChangeHandler","className","Checkbox","Delete","Todolist","useDispatch","useEffect","items","setTasksAC","tasksJSXElements","filter","getTasksForTodoList","map","onClickAllFilter","changeFilter","onClickActiveFilter","onClickACompletedFilter","addTask","changeTodolistTitle","entityStatus","removeTodoList","style","listStyle","paddingLeft","Button","size","marginLeft","TodolistsList","todoList","useSelector","state","todolists","todos","newTitle","success","item","addTaskAC","addTaskTC","taskID","removeTaskAC","removeTaskTC","changeTodolistFilterAC","addTodoList","todolist","addTodolistTC","changeTodolistTitleAC","changeTodoListTitleTC","todolistComponents","tl","Grid","Paper","elevation","padding","container","spacing","Alert","ErrorSnackbar","app","setOpen","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","App","AppBar","position","Toolbar","justifyContent","Menu","Typography","LinearProgress","Container","fixed","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.22b3b153.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\nimport {RequestStatusType} from \"../app/app-reducer\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'b5f63428-88b9-4342-8c9b-16d46fb30269'\r\n    }\r\n})\r\n\r\n//   api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistType>>('todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n    getTask(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`/todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`/todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`/todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n\r\n}\r\n\r\n// types\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    fieldsErrors: string[]\r\n    messages: string[]\r\n    data: D\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3,\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4,\r\n}\r\nexport type TaskType = {\r\n    addedDate: string\r\n    deadline: string\r\n    description: string\r\n    id: string\r\n    order: number\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    status: TaskStatuses\r\n    title: string\r\n    todoListId: string\r\n    entityStatus?: RequestStatusType\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'loading' as RequestStatusType,\r\n    error: null as string | null\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\ntype ActionsType =\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n\r\n","import {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from \"../../api/todolists-api\";\r\nimport {addTodoListAC, changeTodolistEntityStatusAC, removeTodoListAC, setTodoAC} from \"./todolists-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {TaskStateType} from \"../../app/App\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {AxiosError} from \"axios\";\r\n\r\nlet initialState: TaskStateType = {}\r\nexport const tasksReducer = (state = initialState, action: ActionsType): TaskStateType => {\r\n    switch (action.type) {\r\n        case \"SET-TASKS\":\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: action.tasks\r\n            }\r\n\r\n        case 'REMOVE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskID)\r\n            }\r\n        case \"ADD-TASK\":\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]\r\n            }\r\n\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case \"ADD-TODOLIST\": {\r\n            return {\r\n                ...state,\r\n                [action.todolist.id]: []\r\n            }\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            let copyState = {...state}\r\n            delete copyState[action.todoListID]\r\n            return copyState\r\n        }\r\n        case \"SET-TODOLISTS\": {\r\n            const copyState = {...state}\r\n            action.todolists.forEach((tl) => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState;\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n// Actions\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const removeTaskAC = (taskID: string, todolistId: string) => ({type: 'REMOVE-TASK', taskID, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: \"ADD-TASK\", task} as const)\r\nexport const setTasksAC = (todolistId: string, tasks: Array<TaskType>) => ({\r\n    type: \"SET-TASKS\",\r\n    todolistId,\r\n    tasks\r\n} as const)\r\n\r\n//thunk\r\nexport const fetchTaskTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistsAPI.getTask(todolistId)\r\n        .then((res) => {\r\n\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(todolistId, tasks))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            dispatch(setAppErrorAC(err.message))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskID: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistsAPI.deleteTask(todolistId, taskID)\r\n        .then((res) => {\r\n            dispatch(removeTaskAC(taskID, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            dispatch(setAppErrorAC(err.message))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\n\r\nenum ResponseStatuses {\r\n    success = 0,\r\n    error = 1,\r\n    captcha = 10\r\n}\r\nexport const addTaskTC = (title: string, todoListID: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n\r\n    todolistsAPI.createTask(todoListID, title)\r\n        .then((res) => {\r\n\r\n            if (res.data.resultCode === ResponseStatuses.success) {\r\n                const task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if(res.data.resultCode===0){\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                }\r\n                else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                handleServerNetworkError(dispatch, err.message)\r\n            })\r\n\r\n    }\r\n\r\n//types\r\nexport type ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | ReturnType<typeof removeTodoListAC>\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof addTodoListAC>\r\n    | ReturnType<typeof setTodoAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n","import {todolistsAPI, TodolistType} from \"../../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppErrorAC, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\n\r\nlet initialState: Array<TodolistDomainType> = []\r\nexport const todoListsReducer = (state = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case \"SET-TODOLISTS\":\r\n            return action.todolists.map(tl => ({...tl, filter: \"all\", entityStatus: 'idle'}))\r\n        case \"REMOVE-TODOLIST\":\r\n            return state.filter(tl => tl.id !== action.todoListID)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case \"CHANGE-TODOLIST-TITLE\":\r\n            return state.map(tl => tl.id === action.todoListID ? {...tl, title: action.title} : tl)\r\n        case \"CHANGE-TODOLIST-FILTER\":\r\n            return state.map(tl => tl.id === action.todoListID ? {...tl, filter: action.filter} : tl)\r\n        case \"CHANGE-TODOLIST-ENTITY-STATUS\":\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: \"loading\"} : tl)\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => ({\r\n    type: \"CHANGE-TODOLIST-ENTITY-STATUS\",\r\n    entityStatus, id\r\n} as const)\r\nexport const removeTodoListAC = (todoListID: string) => ({type: 'REMOVE-TODOLIST', todoListID} as const)\r\nexport const addTodoListAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (title: string, todoListID: string) => ({\r\n    type: \"CHANGE-TODOLIST-TITLE\",\r\n    title: title,\r\n    todoListID: todoListID\r\n} as const)\r\nexport const changeTodolistFilterAC = (filter: FilterValuesType, todoListID: string) => ({\r\n    type: \"CHANGE-TODOLIST-FILTER\",\r\n    filter: filter,\r\n    todoListID: todoListID\r\n} as const)\r\nexport const setTodoAC = (todolists: Array<TodolistType>) => ({type: \"SET-TODOLISTS\", todolists} as const)\r\n\r\n//thunks\r\nexport const fetchTodolistTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistsAPI.getTodolists()\r\n        .then((res) => {\r\n            let todos = res.data\r\n            dispatch(setTodoAC(todos))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            dispatch(setAppErrorAC(err.message))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\nexport const removeTodoListTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, \"loading\"))\r\n    todolistsAPI.deleteTodolist(todolistId)\r\n        .then(() => {\r\n            dispatch(removeTodoListAC(todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            dispatch(setAppErrorAC(err.message))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistsAPI.createTodolist(title)\r\n        .then((res) => {\r\n            debugger\r\n            if (res.data.resultCode == 0) {\r\n                dispatch(addTodoListAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                if (res.data.messages.length) {\r\n                    dispatch(setAppErrorAC(res.data.messages[0]))\r\n                } else {\r\n                    dispatch(setAppErrorAC(\"Some error occurred\"))\r\n                }\r\n                dispatch(setAppStatusAC('failed'))\r\n            }\r\n        })\r\n}\r\nexport const changeTodoListTitleTC = (title: string, todoListID: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistsAPI.updateTodolist(todoListID, title)\r\n        .then(() => {\r\n            dispatch(changeTodolistTitleAC(title, todoListID))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            dispatch(setAppErrorAC(err.message))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\n\r\n//types\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\nexport type ActionsType =\r\n    | ReturnType<typeof removeTodoListAC>\r\n    | ReturnType<typeof addTodoListAC>\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | ReturnType<typeof setTodoAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}","import {setAppErrorAC, setAppStatusAC,} from '../app/app-reducer';\r\nimport {Dispatch} from 'redux';\r\nimport {ResponseType} from '../api/todolists-api';\r\n\r\nexport const handleServerNetworkError = (dispatch: Dispatch<ErrorAT>, message: string) => {\r\n    dispatch(setAppErrorAC(message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: Dispatch<ErrorAT>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport type ErrorAT = ReturnType<typeof setAppErrorAC> | ReturnType<typeof setAppStatusAC>\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\n\r\n\r\n  export type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n      disabled?: boolean\r\n}\r\n\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n\r\n\r\n\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n\r\n    }\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n\r\n        if (e.key === \"Enter\") {\r\n            addItem()\r\n        }\r\n    }\r\n    // const errorMessage = error ? <div style={{color: \"red\"}}>Title is required</div> : null\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={\"outlined\"}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                helperText={error}\r\n                label={\"Title\"}\r\n                error={!!error}\r\n                disabled={props.disabled}\r\n            />\r\n            <IconButton color={\"primary\"} onClick={addItem} disabled={props.disabled}>\r\n                <AddBox/>\r\n            </IconButton>\r\n            {/*{errorMessage}*/}\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default AddItemForm","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype EditableSpan = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpan) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                color={\"primary\"}\r\n                variant={\"standard\"}\r\n                value={title}\r\n                onChange={onChangeTitle} autoFocus\r\n                onBlur={offEditMode} disabled={props.disabled}/>\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n})\r\n\r\n","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolists-api\";\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    removeTask: (taskId: string, todoListID: string) => void\r\n    todoListID: string\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todoListID: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todoListID: string) => void\r\n}\r\n\r\nexport const Task = React.memo(({task, todoListID, removeTask, changeTaskTitle, changeTaskStatus}: TaskPropsType) => {\r\n\r\n    const onClickHandler = useCallback(() => {\r\n        removeTask(task.id, todoListID)\r\n    }, [removeTask, task, todoListID])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => changeTaskStatus(task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New, todoListID), [changeTaskStatus, task, todoListID])\r\n\r\n    const onTitleChangeHandler = useCallback((title: string) =>\r\n        changeTaskTitle(task.id, title, todoListID), [changeTaskTitle, task, todoListID])\r\n\r\n    return (\r\n\r\n        <div key={task.id}>\r\n                 <span className={task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n                <Checkbox\r\n                    color={\"primary\"}\r\n                    checked={task.status===TaskStatuses.Completed}\r\n                    onChange={onChangeHandler}\r\n                /><EditableSpan title={task.title} changeTitle={onTitleChangeHandler}/>\r\n                 </span>\r\n            <IconButton\r\n                onClick={onClickHandler}\r\n            ><Delete/></IconButton>\r\n        </div>)\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport AddItemForm from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolists-api\";\r\nimport {FilterValuesType} from \"../todolists-reducer\";\r\nimport {fetchTaskTC} from \"../tasks-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\n\r\nexport type PropsTypeTodolist = {\r\n    entityStatus: RequestStatusType\r\n    todoListID: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    removeTask: (taskId: string, todoListID: string) => void\r\n    changeFilter: (value: FilterValuesType, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeTodolistTitle: (title: string, todoListID: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todoListID: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todoListID: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsTypeTodolist) => {\r\n        const dispatch = useDispatch()\r\n\r\n        useEffect(() => {\r\n            dispatch(fetchTaskTC(props.todoListID))\r\n        }, [])\r\n\r\n\r\n        const getTasksForTodoList = () => {\r\n            switch (props.filter) {\r\n                case \"active\":\r\n                    return props.tasks.filter(t => t.status === TaskStatuses.New)\r\n                case \"completed\":\r\n                    return props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n                default:\r\n                    return props.tasks\r\n            }\r\n        }\r\n\r\n        let newTasks = getTasksForTodoList()\r\n\r\n        const tasksJSXElements = newTasks.map(t => {\r\n\r\n\r\n            return (\r\n                <Task key={t.id}\r\n                      task={t}\r\n                      todoListID={props.todoListID}\r\n                      changeTaskStatus={props.changeTaskStatus}\r\n                      changeTaskTitle={props.changeTaskTitle}\r\n                      removeTask={props.removeTask}\r\n                />)\r\n        })\r\n\r\n        const onClickAllFilter = useCallback(() => props.changeFilter(\"all\", props.todoListID), [props.changeFilter, props.todoListID])\r\n        const onClickActiveFilter = useCallback(() => props.changeFilter(\"active\", props.todoListID), [props.changeFilter, props.todoListID])\r\n        const onClickACompletedFilter = useCallback(() => props.changeFilter(\"completed\", props.todoListID), [props.changeFilter, props.todoListID])\r\n\r\n        const OnclickRemoveTodoList = () => props.removeTodoList(props.todoListID)\r\n\r\n        const addTask = useCallback((title: string) => {\r\n            props.addTask(title, props.todoListID)\r\n        }, [props.addTask, props.todoListID])\r\n\r\n        const changeTodolistTitle = useCallback((title: string) => props.changeTodolistTitle(title, props.todoListID), [props.changeTodolistTitle, props.todoListID])\r\n\r\n        return (\r\n\r\n            <div>\r\n                <h3>\r\n                    <EditableSpan title={props.title} changeTitle={changeTodolistTitle}  disabled={props.entityStatus===\"loading\"}/>\r\n                    <IconButton\r\n                        onClick={OnclickRemoveTodoList}\r\n                        disabled={props.entityStatus===\"loading\"}>\r\n                        <Delete/>\r\n                    </IconButton>\r\n                </h3>\r\n                <AddItemForm addItem={addTask} disabled={props.entityStatus===\"loading\"}/>\r\n\r\n                <ul style={{listStyle: \"none\", paddingLeft: \"0px\"}}>\r\n                    {\r\n                        tasksJSXElements\r\n                    }\r\n                </ul>\r\n\r\n\r\n                <div>\r\n                    <Button size={\"small\"}\r\n                            variant={props.filter === \"all\" ? \"contained\" : \"outlined\"}\r\n                            color={\"primary\"}\r\n                            onClick={onClickAllFilter}>All\r\n                    </Button>\r\n                    <Button style={{marginLeft: \"3px\"}}\r\n                            size={\"small\"}\r\n                            variant={props.filter === \"active\" ? \"contained\" : \"outlined\"}\r\n                            color={\"primary\"}\r\n                            onClick={onClickActiveFilter}>Active\r\n                    </Button>\r\n                    <Button size={\"small\"}\r\n                            variant={props.filter === \"completed\" ? \"contained\" : \"outlined\"}\r\n                            color={\"primary\"}\r\n                            onClick={onClickACompletedFilter}>Completed\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n)\r\n// let taskForTodolist = props.tasks;\r\n// if(props.filter === \"active\") {\r\n//     taskForTodolist = taskForTodolist.filter(t => !t.isDone)\r\n// }\r\n// if(props.filter === \"completed\") {\r\n//     taskForTodolist = taskForTodolist.filter(t => t.isDone)\r\n// }\r\n// const getTasksForTodoList = () => {\r\n//     switch (props.filter) {\r\n//         case \"active\":\r\n//             return props.tasks.filter((t) => !t.isDone)\r\n//         case \"completed\":\r\n//             return props.tasks.filter((t) => t.isDone)\r\n//         default:\r\n//             return props.tasks\r\n//     }\r\n// }\r\n//\r\n// let newTasks = getTasksForTodoList()\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodoListTitleTC,\r\n    fetchTodolistTC,\r\n    FilterValuesType,\r\n    removeTodoListTC,\r\n    TodolistDomainType\r\n} from \"./todolists-reducer\";\r\nimport {addTaskTC, removeTaskTC, updateTaskTC} from \"./tasks-reducer\";\r\nimport {TaskStatuses} from \"../../api/todolists-api\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport AddItemForm from \"../../components/AddItemForm/AddItemForm\";\r\nimport {TaskStateType} from \"../../app/App\";\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n    const todoList = useSelector<AppRootStateType, TodolistDomainType[]>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistTC())\r\n\r\n    }, [])\r\n\r\n\r\n    //tasks\r\n    const changeTaskTitle = useCallback((taskId: string, newTitle: string, todoListID: string) => {\r\n        dispatch(updateTaskTC(taskId, {title: newTitle}, todoListID))\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todoListID: string) => {\r\n        dispatch(addTaskTC(title, todoListID))\r\n    }, [dispatch])\r\n\r\n    const changeTaskStatus = useCallback((taskId: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskTC(taskId, {status}, todolistId))\r\n    }, [dispatch])\r\n\r\n    const removeTask = useCallback((taskID: string, todoListID: string) => {\r\n        dispatch(removeTaskTC(taskID, todoListID))\r\n    }, [dispatch])\r\n\r\n//todolist\r\n    const changeFilter = useCallback((value: FilterValuesType, todoListID: string) => {\r\n        dispatch(changeTodolistFilterAC(value, todoListID))\r\n    }, [dispatch])\r\n\r\n    const removeTodoList = useCallback((todoListID: string) => {\r\n        let action = removeTodoListTC(todoListID)\r\n        // dispatchToTasks(action)\r\n        dispatch(action)\r\n\r\n    }, [dispatch])\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        let action = addTodolistTC(title)\r\n        dispatch(action)\r\n\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((title: string, todoListID: string) => {\r\n        dispatch(changeTodoListTitleTC(title, todoListID))\r\n    }, [dispatch])\r\n\r\n\r\n    const todolistComponents = todoList.map(\r\n        tl => {\r\n            return (\r\n                <Grid item key={tl.id}>\r\n                    <Paper elevation={5} style={{padding: \"20px\"}}>\r\n                        <Todolist\r\n                            entityStatus={tl.entityStatus}\r\n                            todoListID={tl.id}\r\n                            removeTask={removeTask}\r\n                            filter={tl.filter}\r\n                            tasks={tasks[tl.id]}\r\n                            title={tl.title}\r\n                            changeFilter={changeFilter}\r\n                            addTask={addTask}\r\n                            changeTaskStatus={changeTaskStatus}\r\n                            removeTodoList={removeTodoList}\r\n                            changeTaskTitle={changeTaskTitle}\r\n                            changeTodolistTitle={changeTodolistTitle}\r\n                        />\r\n                    </Paper>\r\n                </Grid>\r\n            )\r\n        }\r\n    )\r\n\r\n\r\n    return <>\r\n        <Grid container style={{padding: \"20px 0px\"}}>\r\n            <AddItemForm addItem={addTodoList}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {todolistComponents\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n    const [open, setOpen] = React.useState(true)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        setOpen(false)\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {AppBar, Button, Container, IconButton, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {TaskType} from \"../api/todolists-api\";\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistList\";\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {RequestStatusType} from \"./app-reducer\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n\r\n}\r\n\r\nfunction App() {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position={\"static\"}>\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton color={\"inherit\"}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={\"h6\"}>\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button variant={\"outlined\"}\r\n                            color={\"inherit\"}>Login</Button>\r\n                </Toolbar>\r\n                {status === \"loading\" && <LinearProgress color={\"secondary\"}/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <TodolistsList/>\r\n            </Container>\r\n        </div>)\r\n}\r\n\r\n\r\nexport default App;\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {tasksReducer} from \"../features/TodolistsList/tasks-reducer\";\r\nimport {todoListsReducer} from \"../features/TodolistsList/todolists-reducer\";\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\n\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todoListsReducer,\r\n    app:appReducer,\r\n})\r\n// непосредственно создаём state\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к state в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./app/App\";\r\nimport {Provider} from 'react-redux';\r\n\r\nimport {store} from \"./app/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}