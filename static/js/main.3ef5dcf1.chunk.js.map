{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","utils/error-utils.ts","features/TodolistsList/tasks-reducer.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","authAPI","data","post","get","delete","todolistsAPI","title","todolistId","put","taskId","model","ResponseStatuses","handleServerNetworkError","dispatch","message","setAppErrorAC","error","setAppStatusAC","status","handleServerAppError","messages","length","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","authReducer","reducer","actions","isInitialized","setIsInitializedAC","appReducer","changeTodolistEntityStatusAC","index","findIndex","tl","id","entityStatus","removeTodoListAC","todoListID","splice","addTodoListAC","unshift","todolist","filter","changeTodolistTitleAC","changeTodolistFilterAC","setTodoAC","todolists","map","todoListsReducer","changeTaskEntityStatusAC","updateTaskAC","tasks","t","removeTaskAC","taskID","addTaskAC","task","todoListId","setTasksAC","extraReducers","builder","addCase","forEach","tasksReducer","updateTaskTC","domainModel","getState","find","apiModel","deadline","description","priority","startDate","then","res","resultCode","catch","err","console","warn","AddItemForm","React","memo","props","useState","setTitle","setError","addItem","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","key","helperText","label","disabled","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","changeTitle","onDoubleClick","Task","removeTask","changeTaskTitle","changeTaskStatus","log","onClickHandler","useCallback","onChangeHandler","checked","Completed","New","onTitleChangeHandler","className","Checkbox","Delete","Todolist","useDispatch","useEffect","items","tasksJSXElements","getTasksForTodoList","onClickAllFilter","changeFilter","onClickActiveFilter","onClickACompletedFilter","addTask","changeTodolistTitle","removeTodoList","style","listStyle","paddingLeft","Button","size","marginLeft","TodolistsList","todoList","useSelector","auth","todos","newTitle","success","item","addTaskTC","removeTaskTC","addTodoList","addTodolistTC","changeTodoListTitleTC","todolistComponents","Grid","Paper","elevation","padding","container","spacing","to","Alert","ErrorSnackbar","app","setOpen","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","handleChange","App","finally","AppBar","position","Toolbar","justifyContent","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3ef5dcf1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\nimport {RequestStatusType} from \"../app/app-reducer\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'b5f63428-88b9-4342-8c9b-16d46fb30269'\r\n    }\r\n})\r\n\r\n//   api\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId: number }>>('/auth/login', data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{ id: number, email: string, login: string }>>('/auth/me')\r\n    },\r\n    logout(){\r\n        return instance.delete<ResponseType>('/auth/login')\r\n    }\r\n}\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistType>>('todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n    getTask(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`/todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`/todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`/todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n\r\n}\r\n\r\n// types\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    fieldsErrors: string[]\r\n    messages: string[]\r\n    data: D\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3,\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4,\r\n}\r\n\r\n\r\nexport type TaskType = {\r\n    addedDate: string\r\n    deadline: string\r\n    description: string\r\n    id: string\r\n    order: number\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    status: TaskStatuses\r\n    title: string\r\n    todoListId: string\r\n    entityStatus: RequestStatusType\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n","import {setAppErrorAC, setAppStatusAC,} from '../app/app-reducer';\r\nimport {Dispatch} from 'redux';\r\nimport {ResponseType} from '../api/todolists-api';\r\n\r\nexport const handleServerNetworkError = (dispatch: Dispatch<ErrorAT>, message: string) => {\r\n    dispatch(setAppErrorAC({error:message}))\r\n    dispatch(setAppStatusAC({status:'failed'}))\r\n}\r\n\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: Dispatch<ErrorAT>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error:data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error:'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status:'failed'}))\r\n}\r\n\r\nexport type ErrorAT = ReturnType<typeof setAppErrorAC> | ReturnType<typeof setAppStatusAC>\r\n\r\n","import {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from \"../../api/todolists-api\";\r\nimport {addTodoListAC, removeTodoListAC, setTodoAC} from \"./todolists-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {TaskStateType} from \"../../app/App\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {RequestStatusType, setAppErrorAC, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {AxiosError} from \"axios\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n\r\nlet initialState: TaskStateType = {}\r\n\r\nconst slice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        changeTaskEntityStatusAC(state, action: PayloadAction<{ taskID: string, todolistId: string, entityStatus: RequestStatusType }>) {\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) tasks[index] = {...tasks[index], ...action.payload.model}\r\n        },\r\n        removeTaskAC(state, action: PayloadAction<{ taskID: string, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskID)\r\n            if (index > -1) tasks.splice(index, 1)\r\n        },\r\n        addTaskAC(state, action: PayloadAction<{ task: TaskType }>) {\r\n            state[action.payload.task.todoListId].unshift({...action.payload.task, entityStatus: 'idle'})  //entityStatus: 'idle' check later !!!!\r\n        },\r\n        setTasksAC(state, action: PayloadAction<{ todolistId: string, tasks: Array<TaskType> }>) {\r\n            state[action.payload.todolistId] = action.payload.tasks.map(t => ({...t, entityStatus: 'idle'})) //entityStatus: 'idle'check later!!!\r\n        },\r\n\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodoListAC, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        });\r\n        builder.addCase(removeTodoListAC, (state, action) => {\r\n            delete state[action.payload.todoListID]\r\n        });\r\n        builder.addCase(setTodoAC, (state, action) => {\r\n            action.payload.todolists.forEach((tl) => {\r\n                state[tl.id] = []\r\n            })\r\n        })\r\n    }\r\n})\r\n\r\n\r\nexport const {changeTaskEntityStatusAC, updateTaskAC, removeTaskAC, addTaskAC, setTasksAC} = slice.actions\r\nexport const tasksReducer = slice.reducer\r\n\r\n\r\n//thunk\r\nexport const fetchTaskTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    todolistsAPI.getTask(todolistId)\r\n        .then((res) => {\r\n\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC({todolistId: todolistId, tasks: tasks}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            dispatch(setAppErrorAC({error: err.message}))\r\n            dispatch(setAppStatusAC({status: 'failed'}))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskID: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    dispatch(changeTaskEntityStatusAC({taskID: taskID, todolistId: todolistId, entityStatus: \"loading\"}))\r\n    todolistsAPI.deleteTask(todolistId, taskID)\r\n        .then((res) => {\r\n            dispatch(removeTaskAC({taskID: taskID, todolistId: todolistId}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            dispatch(changeTaskEntityStatusAC({taskID: taskID, todolistId: todolistId, entityStatus: \"succeeded\"}))\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            dispatch(setAppErrorAC({error: err.message}))\r\n            dispatch(setAppStatusAC({status: 'failed'}))\r\n        })\r\n}\r\n\r\nenum ResponseStatuses {\r\n    success = 0,\r\n    error = 1,\r\n    captcha = 10\r\n}\r\n\r\nexport const addTaskTC = (title: string, todoListID: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n\r\n    todolistsAPI.createTask(todoListID, title)\r\n        .then((res) => {\r\n\r\n            if (res.data.resultCode === ResponseStatuses.success) {\r\n                const task = res.data.data.item\r\n\r\n                dispatch(addTaskAC({task: task}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n        dispatch(setAppStatusAC({status: \"loading\"}))\r\n        dispatch(changeTaskEntityStatusAC({taskID: taskId, todolistId: todolistId, entityStatus: \"loading\"}))\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC({taskId: taskId, model: domainModel, todolistId: todolistId})\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                    dispatch(changeTaskEntityStatusAC({\r\n                        taskID: taskId,\r\n                        todolistId: todolistId,\r\n                        entityStatus: \"succeeded\"\r\n                    }))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                handleServerNetworkError(dispatch, err.message)\r\n            })\r\n\r\n    }\r\n\r\n//types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {AxiosError} from \"axios\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: \"auth\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n\r\n})\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                debugger\r\n                dispatch(setIsLoggedInAC({value: true}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: false}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(dispatch, error)\r\n        })\r\n}\r\n\r\n\r\n// types\r\n\r\n","import {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\ntype InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized: boolean\r\n\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\n\r\nconst slice = createSlice({\r\n    name: \"app\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsInitializedAC(state, action: PayloadAction<{ isInitialized: boolean }>) {\r\n            state.isInitialized = action.payload.isInitialized\r\n        },\r\n        setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        }\r\n    }\r\n\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const setIsInitializedAC = slice.actions.setIsInitializedAC\r\nexport const setAppErrorAC = slice.actions.setAppErrorAC\r\nexport const setAppStatusAC = slice.actions.setAppStatusAC\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({value: true}));\r\n            dispatch(setIsInitializedAC({isInitialized: true}))\r\n        } else {\r\n\r\n        }\r\n\r\n    })\r\n        .finally(() => {\r\n            dispatch(setIsInitializedAC({isInitialized: true}))\r\n        })\r\n}\r\n\r\n\r\n\r\n","import {todolistsAPI, TodolistType} from \"../../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppErrorAC, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nlet initialState: Array<TodolistDomainType> = []\r\nconst slice = createSlice({\r\n    name: \"todolists\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, entityStatus: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.entityStatus\r\n        },\r\n        removeTodoListAC(state, action: PayloadAction<{ todoListID: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todoListID)\r\n            if (index > -1) state.splice(index, 1)\r\n        },\r\n        addTodoListAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{ title: string, todoListID: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todoListID)\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ filter: FilterValuesType, todoListID: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todoListID)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        setTodoAC(state, action: PayloadAction<{ todolists: Array<TodolistType> }>) {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: \"all\", entityStatus: 'idle'}))\r\n        },\r\n    }\r\n\r\n})\r\nexport const {\r\n    changeTodolistEntityStatusAC,\r\n    removeTodoListAC,\r\n    addTodoListAC,\r\n    changeTodolistTitleAC,\r\n    changeTodolistFilterAC,\r\n    setTodoAC\r\n} = slice.actions\r\nexport const todoListsReducer = slice.reducer\r\n\r\n//thunks\r\nexport const fetchTodolistTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    todolistsAPI.getTodolists()\r\n        .then((res) => {\r\n            let todos = res.data\r\n            dispatch(setTodoAC({todolists: todos}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            dispatch(setAppErrorAC({error: err.message}))\r\n            dispatch(setAppStatusAC({status: 'failed'}))\r\n        })\r\n}\r\nexport const removeTodoListTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    dispatch(changeTodolistEntityStatusAC({id: todolistId, entityStatus: \"loading\"}))\r\n    todolistsAPI.deleteTodolist(todolistId)\r\n        .then(() => {\r\n            dispatch(removeTodoListAC({todoListID: todolistId}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            dispatch(setAppErrorAC({error: err.message}))\r\n            dispatch(setAppStatusAC({status: 'failed'}))\r\n        })\r\n}\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    todolistsAPI.createTodolist(title)\r\n        .then((res) => {\r\n            debugger\r\n            if (res.data.resultCode == 0) {\r\n                dispatch(addTodoListAC({todolist: res.data.data.item}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                if (res.data.messages.length) {\r\n                    dispatch(setAppErrorAC({error: res.data.messages[0]}))\r\n                } else {\r\n                    dispatch(setAppErrorAC({error: \"Some error occurred\"}))\r\n                }\r\n                dispatch(setAppStatusAC({status: 'failed'}))\r\n            }\r\n        })\r\n}\r\nexport const changeTodoListTitleTC = (title: string, todoListID: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    todolistsAPI.updateTodolist(todoListID, title)\r\n        .then(() => {\r\n            dispatch(changeTodolistTitleAC({title: title, todoListID: todoListID}))\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            dispatch(setAppErrorAC({error: err.message}))\r\n            dispatch(setAppStatusAC({status: 'failed'}))\r\n        })\r\n}\r\n\r\n//types\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\n\r\n\r\n  export type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n      disabled?: boolean\r\n}\r\n\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n\r\n\r\n\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n\r\n    }\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n\r\n        if (e.key === \"Enter\") {\r\n            addItem()\r\n        }\r\n    }\r\n    // const errorMessage = error ? <div style={{color: \"red\"}}>Title is required</div> : null\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={\"outlined\"}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                helperText={error}\r\n                label={\"Title\"}\r\n                error={!!error}\r\n                disabled={props.disabled}\r\n            />\r\n            <IconButton color={\"primary\"} onClick={addItem} disabled={props.disabled}>\r\n                <AddBox/>\r\n            </IconButton>\r\n            {/*{errorMessage}*/}\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default AddItemForm","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype EditableSpan = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpan) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                color={\"primary\"}\r\n                variant={\"standard\"}\r\n                value={title}\r\n                onChange={onChangeTitle} autoFocus\r\n                onBlur={offEditMode} disabled={props.disabled}/>\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n})\r\n\r\n","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolists-api\";\r\nimport {RequestStatusType} from \"../../../../app/app-reducer\";\r\n\r\nexport type TaskPropsType = {\r\n    entityStatus: RequestStatusType\r\n    task: TaskType\r\n    removeTask: (taskId: string, todoListID: string) => void\r\n    todoListID: string\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todoListID: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todoListID: string) => void\r\n}\r\n\r\nexport const Task = React.memo(({\r\n                                    entityStatus,\r\n                                    task,\r\n                                    todoListID,\r\n                                    removeTask,\r\n                                    changeTaskTitle,\r\n                                    changeTaskStatus\r\n                                }: TaskPropsType) => {\r\n\r\n    console.log(entityStatus)\r\n\r\n    const onClickHandler = useCallback(() => {\r\n        removeTask(task.id, todoListID)\r\n    }, [removeTask, task, todoListID])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => changeTaskStatus(task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New, todoListID), [changeTaskStatus, task, todoListID])\r\n\r\n    const onTitleChangeHandler = useCallback((title: string) =>\r\n        changeTaskTitle(task.id, title, todoListID), [changeTaskTitle, task, todoListID])\r\n\r\n    return (\r\n\r\n        <div key={task.id}>\r\n                 <span className={task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n                <Checkbox\r\n                    color={\"primary\"}\r\n                    checked={task.status === TaskStatuses.Completed}\r\n                    onChange={onChangeHandler}\r\n                    disabled={entityStatus === \"loading\"}\r\n                /><EditableSpan title={task.title} changeTitle={onTitleChangeHandler}\r\n                                disabled={entityStatus === \"loading\"}/>\r\n                 </span>\r\n            <IconButton\r\n                disabled={entityStatus === \"loading\"}\r\n                onClick={onClickHandler}\r\n            ><Delete/></IconButton>\r\n        </div>)\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport AddItemForm from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolists-api\";\r\nimport {FilterValuesType} from \"../todolists-reducer\";\r\nimport {fetchTaskTC} from \"../tasks-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\n\r\nexport type PropsTypeTodolist = {\r\n    entityStatus: RequestStatusType\r\n    todoListID: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    removeTask: (taskId: string, todoListID: string) => void\r\n    changeFilter: (value: FilterValuesType, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeTodolistTitle: (title: string, todoListID: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todoListID: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todoListID: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsTypeTodolist) => {\r\n        const dispatch = useDispatch()\r\n\r\n        useEffect(() => {\r\n            dispatch(fetchTaskTC(props.todoListID))\r\n        }, [])\r\n\r\n\r\n        const getTasksForTodoList = () => {\r\n            switch (props.filter) {\r\n                case \"active\":\r\n                    return props.tasks.filter(t => t.status === TaskStatuses.New)\r\n                case \"completed\":\r\n                    return props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n                default:\r\n                    return props.tasks\r\n            }\r\n        }\r\n\r\n        let newTasks = getTasksForTodoList()\r\n\r\n        const tasksJSXElements = newTasks.map((t: TaskType) => {\r\n\r\n            return (\r\n                <Task key={t.id}\r\n                      task={t}\r\n                      todoListID={props.todoListID}\r\n                      changeTaskStatus={props.changeTaskStatus}\r\n                      changeTaskTitle={props.changeTaskTitle}\r\n                      removeTask={props.removeTask}\r\n                      entityStatus={t.entityStatus}\r\n                />)\r\n        })\r\n\r\n        const onClickAllFilter = useCallback(() => props.changeFilter(\"all\", props.todoListID), [props.changeFilter, props.todoListID])\r\n        const onClickActiveFilter = useCallback(() => props.changeFilter(\"active\", props.todoListID), [props.changeFilter, props.todoListID])\r\n        const onClickACompletedFilter = useCallback(() => props.changeFilter(\"completed\", props.todoListID), [props.changeFilter, props.todoListID])\r\n\r\n        const OnclickRemoveTodoList = () => props.removeTodoList(props.todoListID)\r\n\r\n        const addTask = useCallback((title: string) => {\r\n            props.addTask(title, props.todoListID)\r\n        }, [props.addTask, props.todoListID])\r\n\r\n        const changeTodolistTitle = useCallback((title: string) => props.changeTodolistTitle(title, props.todoListID), [props.changeTodolistTitle, props.todoListID])\r\n\r\n        return (\r\n\r\n            <div>\r\n                <h3>\r\n                    <EditableSpan title={props.title} changeTitle={changeTodolistTitle}  disabled={props.entityStatus===\"loading\"}/>\r\n                    <IconButton\r\n                        onClick={OnclickRemoveTodoList}\r\n                        disabled={props.entityStatus===\"loading\"}>\r\n                        <Delete/>\r\n                    </IconButton>\r\n                </h3>\r\n                <AddItemForm addItem={addTask} disabled={props.entityStatus===\"loading\"}/>\r\n\r\n                <ul style={{listStyle: \"none\", paddingLeft: \"0px\"}}>\r\n                    {\r\n                        tasksJSXElements\r\n                    }\r\n                </ul>\r\n\r\n\r\n                <div>\r\n                    <Button size={\"small\"}\r\n                            variant={props.filter === \"all\" ? \"contained\" : \"outlined\"}\r\n                            color={\"primary\"}\r\n                            onClick={onClickAllFilter}>All\r\n                    </Button>\r\n                    <Button style={{marginLeft: \"3px\"}}\r\n                            size={\"small\"}\r\n                            variant={props.filter === \"active\" ? \"contained\" : \"outlined\"}\r\n                            color={\"primary\"}\r\n                            onClick={onClickActiveFilter}>Active\r\n                    </Button>\r\n                    <Button size={\"small\"}\r\n                            variant={props.filter === \"completed\" ? \"contained\" : \"outlined\"}\r\n                            color={\"primary\"}\r\n                            onClick={onClickACompletedFilter}>Completed\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n)\r\n// let taskForTodolist = props.tasks;\r\n// if(props.filter === \"active\") {\r\n//     taskForTodolist = taskForTodolist.filter(t => !t.isDone)\r\n// }\r\n// if(props.filter === \"completed\") {\r\n//     taskForTodolist = taskForTodolist.filter(t => t.isDone)\r\n// }\r\n// const getTasksForTodoList = () => {\r\n//     switch (props.filter) {\r\n//         case \"active\":\r\n//             return props.tasks.filter((t) => !t.isDone)\r\n//         case \"completed\":\r\n//             return props.tasks.filter((t) => t.isDone)\r\n//         default:\r\n//             return props.tasks\r\n//     }\r\n// }\r\n//\r\n// let newTasks = getTasksForTodoList()\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodoListTitleTC,\r\n    fetchTodolistTC,\r\n    FilterValuesType,\r\n    removeTodoListTC,\r\n    TodolistDomainType\r\n} from \"./todolists-reducer\";\r\nimport {addTaskTC, removeTaskTC, updateTaskTC} from \"./tasks-reducer\";\r\nimport {TaskStatuses} from \"../../api/todolists-api\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport AddItemForm from \"../../components/AddItemForm/AddItemForm\";\r\nimport {TaskStateType} from \"../../app/App\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n    const todoList = useSelector<AppRootStateType, TodolistDomainType[]>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return;\r\n        }\r\n        dispatch(fetchTodolistTC())\r\n    }, [])\r\n\r\n    console.log(tasks)\r\n\r\n\r\n    //tasks\r\n    const changeTaskTitle = useCallback((taskId: string, newTitle: string, todoListID: string) => {\r\n        dispatch(updateTaskTC(taskId, {title: newTitle}, todoListID))\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todoListID: string) => {\r\n        dispatch(addTaskTC(title, todoListID))\r\n    }, [dispatch])\r\n\r\n    const changeTaskStatus = useCallback((taskId: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskTC(taskId, {status}, todolistId))\r\n    }, [dispatch])\r\n\r\n    const removeTask = useCallback((taskID: string, todoListID: string) => {\r\n        dispatch(removeTaskTC(taskID, todoListID))\r\n    }, [dispatch])\r\n\r\n//todolist\r\n    const changeFilter = useCallback((value: FilterValuesType, todoListID: string) => {\r\n        dispatch(changeTodolistFilterAC({filter:value, todoListID: todoListID}))\r\n    }, [dispatch])\r\n\r\n    const removeTodoList = useCallback((todoListID: string) => {\r\n        let action = removeTodoListTC(todoListID)\r\n        // dispatchToTasks(action)\r\n        dispatch(action)\r\n\r\n    }, [dispatch])\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        let action = addTodolistTC(title)\r\n        dispatch(action)\r\n\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((title: string, todoListID: string) => {\r\n        dispatch(changeTodoListTitleTC(title, todoListID))\r\n    }, [dispatch])\r\n\r\n\r\n    const todolistComponents = todoList.map(\r\n        tl => {\r\n            return (\r\n                <Grid item key={tl.id}>\r\n                    <Paper elevation={5} style={{padding: \"20px\"}}>\r\n                        <Todolist\r\n                            entityStatus={tl.entityStatus}\r\n                            todoListID={tl.id}\r\n                            removeTask={removeTask}\r\n                            filter={tl.filter}\r\n                            tasks={tasks[tl.id]}\r\n                            title={tl.title}\r\n                            changeFilter={changeFilter}\r\n                            addTask={addTask}\r\n                            changeTaskStatus={changeTaskStatus}\r\n                            removeTodoList={removeTodoList}\r\n                            changeTaskTitle={changeTaskTitle}\r\n                            changeTodolistTitle={changeTodolistTitle}\r\n                        />\r\n                    </Paper>\r\n                </Grid>\r\n            )\r\n        }\r\n    )\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    return <>\r\n        <Grid container style={{padding: \"20px 0px\"}}>\r\n            <AddItemForm addItem={addTodoList}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {todolistComponents\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n    const [open, setOpen] = React.useState(true)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        setOpen(false)\r\n        dispatch(setAppErrorAC({error: null}))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 4) {\r\n                errors.password = 'Must be more than 4 characters';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            //alert(JSON.stringify(values));\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n\r\n                        />\r\n                        {formik.errors.email && formik.touched.email &&\r\n                        <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n\r\n\r\n                        />\r\n                        {formik.touched.email && formik.errors.password &&\r\n                        <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                name={\"rememberMe\"}\r\n                                onChange={formik.handleChange}\r\n                                value={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {AppBar, Button, CircularProgress, Container, IconButton, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {TaskType} from \"../api/todolists-api\";\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistList\";\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport {logoutTC} from \"../features/Login/auth-reducer\";\r\n\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n\r\n}\r\n\r\nfunction App() {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const dispatch = useDispatch()\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position={\"static\"}>\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton color={\"inherit\"}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={\"h6\"}>\r\n                        Todolists\r\n                    </Typography>\r\n                    {isLoggedIn && <Button variant={\"outlined\"} onClick={logoutHandler}\r\n                                           color={\"inherit\"}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === \"loading\" && <LinearProgress color={\"secondary\"}/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistsList/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n\r\n            </Container>\r\n        </div>)\r\n}\r\n\r\n\r\nexport default App;\r\n","import {combineReducers} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {tasksReducer} from \"../features/TodolistsList/tasks-reducer\";\r\nimport {todoListsReducer} from \"../features/TodolistsList/todolists-reducer\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todoListsReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\n// непосредственно создаём state\r\n//export const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\n// создаем стор с помощью redux toolkit\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) =>\r\n        getDefaultMiddleware().prepend(thunk),\r\n})\r\n\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к state в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./app/App\";\r\nimport {Provider} from 'react-redux';\r\n\r\nimport {store} from \"./app/store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n        <App/>\r\n        </HashRouter>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}