{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditTableSpan.tsx","Todolist.tsx","store/todolists-reducer.ts","store/tasks-reducer.ts","AppWithRedux.tsx","store/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","props","useState","title","setTitle","error","setError","onClickItem","trimmedTitle","trim","addItem","errorMessage","style","color","TextField","value","onChange","e","currentTarget","onKeyPress","key","variant","label","IconButton","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","changeTitle","onDoubleClick","Todolist","tasksJSXElements","tasks","map","t","id","className","isDone","Checkbox","checked","changeTaskStatus","todoListID","changeTaskTitle","removeTask","Delete","changeTodolistTitle","removeTodoList","addTask","listStyle","paddingLeft","Button","size","filter","changeFilter","marginLeft","initialState","AppWithRedux","todoList","useSelector","state","todolists","dispatch","useDispatch","taskId","newTitle","type","todolistId","taskID","addTaskAC","changeTaskStatusAC","removeTaskAC","ChangeTodolistFilterAC","action","RemoveTodoListAC","ChangeTodolistTitleAC","getTaskForTodolist","todolistComponents","tl","Grid","item","Paper","elevation","padding","AppBar","position","Toolbar","justifyContent","Menu","Typography","Container","fixed","container","v1","AddTodoListAC","spacing","rootReducer","combineReducers","task","copyState","newTodolist","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.ab60fbd5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\n\r\nfunction AddItemForm(props: AddItemFormPropsType) {\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n    const onClickItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n        } else {\r\n            setError(true)\r\n        }\r\n\r\n        setTitle(\"\")\r\n\r\n    }\r\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            onClickItem()\r\n        }\r\n    }\r\n    const errorMessage = error ? <div style={{color: \"red\"}}>Title is required</div> : null\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                value={title}\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onKeyPressAddItem}\r\n                variant={\"outlined\"}\r\n                label={\"Title\"}\r\n                error={error}\r\n            />\r\n            <IconButton onClick={onClickItem}>\r\n                <AddBox/>\r\n            </IconButton>\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddItemForm","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype EditableSpan = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nfunction EditableSpan(props: EditableSpan) {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                color={\"primary\"}\r\n                variant={\"standard\"}\r\n                value={title}\r\n                onChange={onChangeTitle} autoFocus\r\n                onBlur={offEditMode}/>\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n}\r\n\r\nexport default EditableSpan;","import React, {ChangeEvent} from \"react\";\r\nimport {FilterValuesType, TaskType} from \"./App\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport EditableSpan from \"./EditTableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\n\r\nexport type PropsTypeTodolist = {\r\n    todoListID: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    removeTask: (taskId: string, todoListID: string) => void\r\n    changeFilter: (value: FilterValuesType, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeTodolistTitle: (title: string, todoListID: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todoListID: string) => void\r\n    changeTaskStatus: (taskId: string, newIsDoneValue: boolean, todoListID: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsTypeTodolist) {\r\n\r\n    const tasksJSXElements = props.tasks.map(t => {\r\n        const changeTaskTile = (title: string) =>\r\n            props.changeTaskTitle(t.id, title, props.todoListID)\r\n        const removeTask = () => {\r\n            props.removeTask(t.id, props.todoListID)\r\n        }\r\n        const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => props.changeTaskStatus(t.id, e.currentTarget.checked, props.todoListID)\r\n\r\n        return (\r\n            <li key={t.id}>\r\n                 <span className={t.isDone ? \"is-done\" : \"\"}>\r\n                <Checkbox\r\n                    color={\"primary\"}\r\n                    checked={t.isDone}\r\n                    onChange={changeTaskStatus}\r\n                />\r\n                     <EditableSpan title={t.title} changeTitle={changeTaskTile}/>\r\n                 </span>\r\n                <IconButton\r\n                    onClick={removeTask}\r\n                    color={\"secondary\"}><Delete/></IconButton>\r\n            </li>)\r\n    })\r\n    const onClickAllFilter = () => props.changeFilter(\"all\", props.todoListID)\r\n    const onClickActiveFilter = () => props.changeFilter(\"active\", props.todoListID)\r\n    const onClickACompletedFilter = () => props.changeFilter(\"completed\", props.todoListID)\r\n    const OnclickRemoveTodoList = () => props.removeTodoList(props.todoListID)\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.todoListID)\r\n    }\r\n    const changeTodolistTitle = (title: string) => props.changeTodolistTitle(title, props.todoListID)\r\n    return (\r\n\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.title} changeTitle={changeTodolistTitle}/>\r\n                <IconButton\r\n                    onClick={OnclickRemoveTodoList} color={\"secondary\"}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n\r\n            <ul style={{listStyle: \"none\", paddingLeft: \"0px\"}}>\r\n                {\r\n                    tasksJSXElements\r\n                }\r\n            </ul>\r\n\r\n\r\n            <div>\r\n                <Button size={\"small\"}\r\n                        variant={props.filter === \"all\" ? \"contained\" : \"outlined\"}\r\n                        color={\"primary\"}\r\n                        onClick={onClickAllFilter}>All\r\n                </Button>\r\n                <Button style={{marginLeft: \"3px\"}}\r\n                        size={\"small\"}\r\n                        variant={props.filter === \"active\" ? \"contained\" : \"outlined\"}\r\n                        color={\"primary\"}\r\n                        onClick={onClickActiveFilter}>Active\r\n                </Button>\r\n                <Button size={\"small\"}\r\n                        variant={props.filter === \"completed\" ? \"contained\" : \"outlined\"}\r\n                        color={\"primary\"}\r\n                        onClick={onClickACompletedFilter}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {FilterValuesType, TaskStateType, TodolistType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\ntype RemoveTodolistActionType = {\r\n    type: \"REMOVE-TODOLIST\"\r\n    todoListID: string\r\n}\r\ntype AddTodolistActionType = {\r\n    type: \"ADD-TODOLIST\"\r\n    title: string\r\n    todoListID: string\r\n}\r\ntype ChangeTodolistTitleActionType = {\r\n    type: \"CHANGE-TODOLIST-TITLE\"\r\n    title: string\r\n    todoListID: string\r\n}\r\ntype ChangeTodolistFilterActionType = {\r\n    type: \"CHANGE-TODOLIST-FILTER\"\r\n    filter: FilterValuesType\r\n    todoListID: string\r\n}\r\n\r\nexport type ActionType =\r\n    RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n\r\nlet initialState: Array<TodolistType> = []\r\n\r\n\r\nexport const todoListsReducer = (state = initialState, action: ActionType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TODOLIST\":\r\n            return state.filter(tl => tl.id !== action.todoListID)\r\n        case \"ADD-TODOLIST\":\r\n            const newTodolist: TodolistType = {id: action.todoListID, title: action.title, filter: \"all\"}\r\n            return [...state, newTodolist]\r\n        case \"CHANGE-TODOLIST-TITLE\":\r\n            return state.map(tl => tl.id === action.todoListID ? {...tl, title: action.title} : tl)\r\n        case \"CHANGE-TODOLIST-FILTER\":\r\n            return state.map(tl => tl.id === action.todoListID ? {...tl, filter: action.filter} : tl)\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const RemoveTodoListAC = (todoListID: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', todoListID}\r\n}\r\nexport const AddTodoListAC = (title: string): AddTodolistActionType => {\r\n    return {type: \"ADD-TODOLIST\", title: title, todoListID: v1()}\r\n}\r\nexport const ChangeTodolistTitleAC = (title: string, todoListID: string): ChangeTodolistTitleActionType => {\r\n    return {type: \"CHANGE-TODOLIST-TITLE\", title: title, todoListID: todoListID}\r\n}\r\n\r\nexport const ChangeTodolistFilterAC = (filter: FilterValuesType, todoListID: string): ChangeTodolistFilterActionType => {\r\n    return {type: \"CHANGE-TODOLIST-FILTER\", filter: filter, todoListID: todoListID}\r\n}","import {TaskStateType, TaskType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\n\r\ntype RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    todolistId: string\r\n    taskID: string\r\n}\r\ntype AddTaskActionType = {\r\n    type: \"ADD-TASK\"\r\n    title: string\r\n    todolistId: string\r\n}\r\n\r\ntype ChangeTaskStatusActionType = {\r\n    type: \"CHANGE-TASK-STATUS\"\r\n    isDone: boolean\r\n    todolistId: string\r\n    taskID: string\r\n}\r\ntype ChangeTaskTitleActionType = {\r\n    type: \"CHANGE-TASK-TITLE\"\r\n    title: string\r\n    todolistId: string\r\n    taskID: string\r\n}\r\ntype AddTodolistActionType = {\r\n    type: \"ADD-TODOLIST\"\r\n    title: string\r\n    todoListID: string\r\n}\r\ntype  RemoveTodolistActionType = {\r\n    todolistId: string\r\n    type: \"REMOVE-TODOLIST\"\r\n}\r\nexport type ActionType =\r\n    RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n\r\nlet initialState: TaskStateType = {}\r\n// type initialStateType = typeof initialState // более гибко в реальной жизни\r\n\r\nexport const tasksReducer = (state = initialState, action: ActionType): TaskStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskID)\r\n            }\r\n        case \"ADD-TASK\":\r\n            let task: TaskType = {id: v1(), isDone: false, title: action.title}\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: [task, ...state[action.todolistId]]\r\n            }\r\n        case \"CHANGE-TASK-STATUS\":\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskID ? {\r\n                    ...t,\r\n                    isDone: action.isDone\r\n                } : t)\r\n\r\n            }\r\n\r\n        case \"CHANGE-TASK-TITLE\" : {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskID ? {\r\n                    ...t,\r\n                    title: action.title\r\n                } : t)\r\n\r\n            }\r\n\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            return {\r\n                ...state,\r\n                [action.todoListID]: []\r\n            }\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            let copyState = {...state}\r\n            delete copyState[action.todolistId]\r\n            return copyState\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const removeTaskAC = (taskID: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskID, todolistId}\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\r\n    return {type: \"ADD-TASK\", title, todolistId}\r\n}\r\nexport const changeTaskStatusAC = (taskID: string, isDone: boolean, todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: \"CHANGE-TASK-STATUS\", taskID, isDone, todolistId}\r\n}\r\n\r\nexport const changeTaskTitleAC = (taskID: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: \"CHANGE-TASK-TITLE\", title, todolistId, taskID}\r\n}\r\nexport const RemoveTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return {type: \"REMOVE-TODOLIST\", todolistId}\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {Todolist} from \"./Todolist\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    AddTodoListAC,\r\n    ChangeTodolistFilterAC,\r\n    ChangeTodolistTitleAC,\r\n    RemoveTodoListAC\r\n} from \"./store/todolists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./store/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store/store\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\nexport type TodolistType = {\r\n    id: string,\r\n    title: string,\r\n    filter: FilterValuesType\r\n\r\n}\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const todoList = useSelector<AppRootStateType, TodolistType[]>(state => state.todolists)\r\n\r\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    //tasks\r\n    function changeTaskTitle(taskId: string, newTitle: string, todoListID: string) {\r\n        dispatch(changeTaskTitleAC(taskId, newTitle, todoListID))\r\n    }\r\n\r\n    function addTask(title: string, todoListID: string) {\r\n        dispatch(addTaskAC(title, todoListID))\r\n    }\r\n\r\n    function changeTaskStatus(taskId: string, isDone: boolean, todolistId: string) {\r\n        dispatch(changeTaskStatusAC(taskId, isDone,todolistId))\r\n    }\r\n\r\n    function removeTask(taskID: string, todoListID: string) {\r\n        dispatch(removeTaskAC(taskID, todoListID))\r\n    }\r\n\r\n//todolist\r\n    function changeFilter(value: FilterValuesType, todoListID: string) {\r\n        dispatch(ChangeTodolistFilterAC(value, todoListID))\r\n    }\r\n\r\n    function removeTodoList(todoListID: string) {\r\n        let action = RemoveTodoListAC(todoListID)\r\n        // dispatchToTasks(action)\r\n        dispatch(action)\r\n\r\n    }\r\n\r\n    function addTodoList(title: string) {\r\n        let action = AddTodoListAC(title)\r\n        dispatch(action)\r\n\r\n    }\r\n\r\n    function changeTodolistTitle(title: string, todoListID: string) {\r\n        dispatch(ChangeTodolistTitleAC(title, todoListID))\r\n    }\r\n\r\n    //ui\r\n    function getTaskForTodolist(todoList: TodolistType) {\r\n        switch (todoList.filter) {\r\n            case \"active\" :\r\n                return tasks[todoList.id].filter(t => t.isDone === false)\r\n\r\n            case \"completed\":\r\n                return tasks[todoList.id].filter(t => t.isDone === true)\r\n\r\n            default:\r\n                return tasks[todoList.id]\r\n        }\r\n    }\r\n\r\n    const todolistComponents = todoList.map(\r\n        tl => {\r\n            return (\r\n                <Grid item key={tl.id}>\r\n                    <Paper elevation={5} style={{padding: \"20px\"}}>\r\n                        <Todolist\r\n                            todoListID={tl.id}\r\n                            removeTask={removeTask}\r\n                            filter={tl.filter}\r\n                            tasks={getTaskForTodolist(tl)}\r\n                            title={tl.title}\r\n                            changeFilter={changeFilter}\r\n                            addTask={addTask}\r\n                            changeTaskStatus={changeTaskStatus}\r\n                            removeTodoList={removeTodoList}\r\n                            changeTaskTitle={changeTaskTitle}\r\n                            changeTodolistTitle={changeTodolistTitle}\r\n                        />\r\n                    </Paper>\r\n                </Grid>\r\n            )\r\n        }\r\n    )\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position={\"static\"}>\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton color={\"inherit\"}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={\"h6\"}>\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button variant={\"outlined\"}\r\n                            color={\"inherit\"}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px 0px\"}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todolistComponents}\r\n                </Grid>\r\n            </Container>\r\n        </div>)\r\n}\r\n\r\nexport default AppWithRedux;\r\n","\r\nimport {tasksReducer} from './tasks-reducer';\r\nimport {todoListsReducer} from './todolists-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todoListsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport {Provider} from 'react-redux';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {store} from \"./store/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}