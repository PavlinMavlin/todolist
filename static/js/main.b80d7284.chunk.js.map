{"version":3,"sources":["AddItemForm.tsx","EditTableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","onClickItem","trimmedTitle","trim","addItem","errorMessage","style","color","TextField","value","onChange","e","currentTarget","onKeyPress","key","variant","label","IconButton","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","changeTitle","onDoubleClick","Todolist","tasksJSXElements","tasks","map","t","id","className","isDone","Checkbox","checked","changeTaskStatus","todoListID","changeTaskTitle","removeTask","Delete","changeTodolistTitle","removeTodoList","addTask","listStyle","paddingLeft","Button","size","filter","changeFilter","marginLeft","App","todoListId_1","v1","todoListId_2","todoList","setTodoList","setTasks","taskId","newTitle","getTaskForTodolist","tl","newTask","newIsDoneValue","todolistComponents","Grid","item","Paper","elevation","padding","AppBar","position","Toolbar","justifyContent","Menu","Typography","Container","fixed","container","newTodolistID","newTodolist","spacing","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"+UAsDeA,MA5Cf,SAAqBC,GAA8B,IAAD,EACpBC,mBAAiB,IADG,mBACvCC,EADuC,KAChCC,EADgC,OAEpBF,oBAAkB,GAFE,mBAEvCG,EAFuC,KAEhCC,EAFgC,KAQxCC,EAAc,WAChB,IAAMC,EAAeL,EAAMM,OACvBD,EACAP,EAAMS,QAAQF,GAEdF,GAAS,GAGbF,EAAS,KAQPO,EAAeN,EAAQ,yBAAKO,MAAO,CAACC,MAAO,QAApB,qBAAsD,KAEnF,OACI,6BACI,kBAACC,EAAA,EAAD,CACIC,MAAOZ,EACPa,SA1BU,SAACC,GACnBb,EAASa,EAAEC,cAAcH,OACzBT,GAAS,IAyBDa,WAZc,SAACF,GACT,UAAVA,EAAEG,KACFb,KAWIc,QAAS,WACTC,MAAO,QACPjB,MAAOA,IAEX,kBAACkB,EAAA,EAAD,CAAYC,QAASjB,GACjB,kBAACkB,EAAA,EAAD,OAEHd,ICbEe,MA3Bf,SAAsBzB,GAAsB,IAAD,EAEPC,oBAAkB,GAFX,mBAEhCyB,EAFgC,KAEtBC,EAFsB,OAGb1B,mBAAiBD,EAAME,OAHV,mBAGhCA,EAHgC,KAGzBC,EAHyB,KAevC,OACIuB,EACM,kBAACb,EAAA,EAAD,CACED,MAAO,UACPQ,QAAS,WACTN,MAAOZ,EACPa,SAXU,SAACC,GACnBb,EAASa,EAAEC,cAAcH,QAUQc,WAAS,EAClCC,OAhBQ,WAChBF,GAAY,GACZ3B,EAAM8B,YAAY5B,MAeZ,0BAAM6B,cAlBG,kBAAMJ,GAAY,KAkBO3B,EAAME,Q,2BCV/C,SAAS8B,EAAShC,GAErB,IAAMiC,EAAmBjC,EAAMkC,MAAMC,KAAI,SAAAC,GAOrC,OACI,wBAAIjB,IAAKiB,EAAEC,IACN,0BAAMC,UAAWF,EAAEG,OAAS,UAAY,IACzC,kBAACC,EAAA,EAAD,CACI5B,MAAO,UACP6B,QAASL,EAAEG,OACXxB,SAPa,SAACC,GAAD,OAAsChB,EAAM0C,iBAAiBN,EAAEC,GAAIrB,EAAEC,cAAcwB,QAASzC,EAAM2C,eAS9G,kBAAC,EAAD,CAAczC,MAAOkC,EAAElC,MAAO4B,YAdpB,SAAC5B,GAAD,OACnBF,EAAM4C,gBAAgBR,EAAEC,GAAInC,EAAOF,EAAM2C,gBAerC,kBAACrB,EAAA,EAAD,CACIC,QAfO,WACfvB,EAAM6C,WAAWT,EAAEC,GAAIrC,EAAM2C,aAerB/B,MAAO,aAAa,kBAACkC,EAAA,EAAD,WAWpC,OAEI,6BACI,4BACI,kBAAC,EAAD,CAAc5C,MAAOF,EAAME,MAAO4B,YALlB,SAAC5B,GAAD,OAAmBF,EAAM+C,oBAAoB7C,EAAOF,EAAM2C,eAM1E,kBAACrB,EAAA,EAAD,CACIC,QAXc,kBAAMvB,EAAMgD,eAAehD,EAAM2C,aAWf/B,MAAO,aACvC,kBAACkC,EAAA,EAAD,QAGR,kBAAC,EAAD,CAAarC,QAdL,SAACP,GACbF,EAAMiD,QAAQ/C,EAAOF,EAAM2C,eAevB,wBAAIhC,MAAO,CAACuC,UAAW,OAAQC,YAAa,QAEpClB,GAKR,6BACI,kBAACmB,EAAA,EAAD,CAAQC,KAAM,QACNjC,QAA0B,QAAjBpB,EAAMsD,OAAmB,YAAc,WAChD1C,MAAO,UACPW,QA/BK,kBAAMvB,EAAMuD,aAAa,MAAOvD,EAAM2C,cA4BnD,OAKA,kBAACS,EAAA,EAAD,CAAQzC,MAAO,CAAC6C,WAAY,OACpBH,KAAM,QACNjC,QAA0B,WAAjBpB,EAAMsD,OAAsB,YAAc,WACnD1C,MAAO,UACPW,QApCQ,kBAAMvB,EAAMuD,aAAa,SAAUvD,EAAM2C,cAgCzD,UAMA,kBAACS,EAAA,EAAD,CAAQC,KAAM,QACNjC,QAA0B,cAAjBpB,EAAMsD,OAAyB,YAAc,WACtD1C,MAAO,UACPW,QAxCY,kBAAMvB,EAAMuD,aAAa,YAAavD,EAAM2C,cAqChE,e,2ECyEDc,MArIf,WAAgB,IAAD,EACLC,EAAeC,cACfC,EAAeD,cAFV,EAGqB1D,mBAA8B,CAC1D,CAACoC,GAAIqB,EAAcxD,MAAO,gBAAiBoD,OAAQ,OACnD,CAACjB,GAAIuB,EAAc1D,MAAO,cAAeoD,OAAQ,SAL1C,mBAGJO,EAHI,KAGMC,EAHN,OAOe7D,oBAAQ,mBAC7ByD,EAAe,CACZ,CAACrB,GAAIsB,cAAMzD,MAAO,WAAYqC,QAAQ,GACtC,CAACF,GAAIsB,cAAMzD,MAAO,YAAaqC,QAAQ,GACvC,CAACF,GAAIsB,cAAMzD,MAAO,QAASqC,QAAQ,KAJT,cAO7BqB,EAAe,CACZ,CAACvB,GAAIsB,cAAMzD,MAAO,OAAQqC,QAAQ,GAClC,CAACF,GAAIsB,cAAMzD,MAAO,OAAQqC,QAAQ,GAClC,CAACF,GAAIsB,cAAMzD,MAAO,QAASqC,QAAQ,KAVT,IAPvB,mBAOJL,EAPI,KAOG6B,EAPH,KAqBX,SAASnB,EAAgBoB,EAAgBC,EAAkBtB,GACvDT,EAAMS,GAAcT,EAAMS,GAAYR,KAAI,SAAAC,GAAC,OAAIA,EAAEC,KAAO2B,EAAT,2BAAsB5B,GAAtB,IAAyBlC,MAAO+D,IAAY7B,KAC3F2B,EAAS,eAAI7B,IAIjB,SAASgC,EAAmBL,GACxB,OAAQA,EAASP,QACb,IAAK,SACD,OAAOpB,EAAM2B,EAASxB,IAAIiB,QAAO,SAAAlB,GAAC,OAAiB,IAAbA,EAAEG,UAE5C,IAAK,YACD,OAAOL,EAAM2B,EAASxB,IAAIiB,QAAO,SAAAlB,GAAC,OAAiB,IAAbA,EAAEG,UAE5C,QACI,OAAOL,EAAM2B,EAASxB,KAIlC,SAASkB,EAAazC,EAAyB6B,GAC3CmB,EAAYD,EAAS1B,KAAI,SAAAgC,GAAE,OAAIA,EAAG9B,KAAOM,EAAV,2BAA2BwB,GAA3B,IAA+Bb,OAAQxC,IAASqD,MAGnF,SAASpB,EAAoB7C,EAAeyC,GACxCmB,EAAYD,EAAS1B,KAAI,SAAAgC,GAAE,OAAIA,EAAG9B,KAAOM,EAAV,2BAA2BwB,GAA3B,IAA+BjE,MAAOA,IAASiE,MAGlF,SAASlB,EAAQ/C,EAAeyC,GAC5B,IAAMyB,EAAoB,CACtB/B,GAAIsB,cACJzD,MAAOA,EACPqC,QAAQ,GAEZwB,EAAS,2BAAI7B,GAAL,kBAAaS,EAAb,CAA2ByB,GAA3B,mBAAuClC,EAAMS,QAGzD,SAASD,EAAiBsB,EAAgBK,EAAyB1B,GAE/DoB,EAAS,2BACF7B,GADC,kBAEHS,EAAaT,EAAMS,GAAYR,KAAI,SAAAC,GAAC,OAAIA,EAAEC,KAAO2B,EAAT,2BAAsB5B,GAAtB,IAAyBG,OAAQ8B,IAAkBjC,QAIpG,SAASS,EAAWmB,EAAgBrB,GAChCT,EAAMS,GAAcT,EAAMS,GAAYW,QAAO,SAAAlB,GAAC,OAAIA,EAAEC,KAAO2B,KAC3DD,EAAS,eAAI7B,IAIjB,SAASc,EAAeL,GACpBmB,EAAYD,EAASP,QAAO,SAAAa,GAAE,OAAIA,EAAG9B,KAAOM,aACrCT,EAAMS,GAWjB,IAAM2B,EAAqBT,EAAS1B,KAChC,SAAAgC,GACI,OACI,kBAACI,EAAA,EAAD,CAAMC,MAAI,EAACrD,IAAKgD,EAAG9B,IACf,kBAACoC,EAAA,EAAD,CAAOC,UAAW,EAAG/D,MAAO,CAACgE,QAAS,SAClC,kBAAC3C,EAAD,CACIW,WAAYwB,EAAG9B,GACfQ,WAAYA,EACZS,OAAQa,EAAGb,OACXpB,MAAOgC,EAAmBC,GAC1BjE,MAAOiE,EAAGjE,MACVqD,aAAcA,EACdN,QAASA,EACTP,iBAAkBA,EAClBM,eAAgBA,EAChBJ,gBAAiBA,EACjBG,oBAAqBA,SAQ7C,OACI,yBAAKT,UAAU,OACX,kBAACsC,EAAA,EAAD,CAAQC,SAAU,UACd,kBAACC,EAAA,EAAD,CAASnE,MAAO,CAACoE,eAAgB,kBAC7B,kBAACzD,EAAA,EAAD,CAAYV,MAAO,WACf,kBAACoE,EAAA,EAAD,OAEJ,kBAACC,EAAA,EAAD,CAAY7D,QAAS,MAArB,aAGA,kBAACgC,EAAA,EAAD,CAAQhC,QAAS,WACTR,MAAO,WADf,WAIR,kBAACsE,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACZ,EAAA,EAAD,CAAMa,WAAS,EAACzE,MAAO,CAACgE,QAAS,aAC7B,kBAAC,EAAD,CAAalE,QAhD7B,SAAqBP,GACjB,IAAMmF,EAAgB1B,cAChB2B,EAA4B,CAACjD,GAAIgD,EAAenF,MAAOA,EAAOoD,OAAQ,OAC5EQ,EAAY,GAAD,mBAAKD,GAAL,CAAeyB,KAC1BvB,EAAS,2BAAI7B,GAAL,kBAAamD,EAAgB,UA8C7B,kBAACd,EAAA,EAAD,CAAMa,WAAS,EAACG,QAAS,GACpBjB,MC5IDkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDqI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnG,GACLoG,QAAQpG,MAAMA,EAAMqG,c","file":"static/js/main.b80d7284.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\n\r\nfunction AddItemForm(props: AddItemFormPropsType) {\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(false)\r\n    }\r\n    const onClickItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n        } else {\r\n            setError(true)\r\n        }\r\n\r\n        setTitle(\"\")\r\n\r\n    }\r\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            onClickItem()\r\n        }\r\n    }\r\n    const errorMessage = error ? <div style={{color: \"red\"}}>Title is required</div> : null\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                value={title}\r\n                onChange={onChangeTitle}\r\n                onKeyPress={onKeyPressAddItem}\r\n                variant={\"outlined\"}\r\n                label={\"Title\"}\r\n                error={error}\r\n            />\r\n            <IconButton onClick={onClickItem}>\r\n                <AddBox/>\r\n            </IconButton>\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddItemForm","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype EditableSpan = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nfunction EditableSpan(props: EditableSpan) {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                color={\"primary\"}\r\n                variant={\"standard\"}\r\n                value={title}\r\n                onChange={onChangeTitle} autoFocus\r\n                onBlur={offEditMode}/>\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n}\r\n\r\nexport default EditableSpan;","import React, {ChangeEvent} from \"react\";\r\nimport {FilterValuesType, TaskType} from \"./App\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport EditableSpan from \"./EditTableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\n\r\nexport type PropsTypeTodolist = {\r\n    todoListID: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    removeTask: (taskId: string, todoListID: string) => void\r\n    changeFilter: (value: FilterValuesType, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeTodolistTitle: (title: string, todoListID: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todoListID: string) => void\r\n    changeTaskStatus: (taskId: string, newIsDoneValue: boolean, todoListID: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsTypeTodolist) {\r\n\r\n    const tasksJSXElements = props.tasks.map(t => {\r\n        const changeTaskTile = (title: string) =>\r\n            props.changeTaskTitle(t.id, title, props.todoListID)\r\n        const removeTask = () => {\r\n            props.removeTask(t.id, props.todoListID)\r\n        }\r\n        const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => props.changeTaskStatus(t.id, e.currentTarget.checked, props.todoListID)\r\n        return (\r\n            <li key={t.id}>\r\n                 <span className={t.isDone ? \"is-done\" : \"\"}>\r\n                <Checkbox\r\n                    color={\"primary\"}\r\n                    checked={t.isDone}\r\n                    onChange={changeTaskStatus}\r\n                />\r\n                     <EditableSpan title={t.title} changeTitle={changeTaskTile}/>\r\n                 </span>\r\n                <IconButton\r\n                    onClick={removeTask}\r\n                    color={\"secondary\"}><Delete/></IconButton>\r\n            </li>)\r\n    })\r\n    const onClickAllFilter = () => props.changeFilter(\"all\", props.todoListID)\r\n    const onClickActiveFilter = () => props.changeFilter(\"active\", props.todoListID)\r\n    const onClickACompletedFilter = () => props.changeFilter(\"completed\", props.todoListID)\r\n    const OnclickRemoveTodoList = () => props.removeTodoList(props.todoListID)\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.todoListID)\r\n    }\r\n    const changeTodolistTitle = (title: string) => props.changeTodolistTitle(title, props.todoListID)\r\n    return (\r\n\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.title} changeTitle={changeTodolistTitle}/>\r\n                <IconButton\r\n                    onClick={OnclickRemoveTodoList} color={\"secondary\"}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n\r\n            <ul style={{listStyle: \"none\", paddingLeft: \"0px\"}}>\r\n                {\r\n                    tasksJSXElements\r\n                }\r\n            </ul>\r\n\r\n\r\n            <div>\r\n                <Button size={\"small\"}\r\n                        variant={props.filter === \"all\" ? \"contained\" : \"outlined\"}\r\n                        color={\"primary\"}\r\n                        onClick={onClickAllFilter}>All\r\n                </Button>\r\n                <Button style={{marginLeft: \"3px\"}}\r\n                        size={\"small\"}\r\n                        variant={props.filter === \"active\" ? \"contained\" : \"outlined\"}\r\n                        color={\"primary\"}\r\n                        onClick={onClickActiveFilter}>Active\r\n                </Button>\r\n                <Button size={\"small\"}\r\n                        variant={props.filter === \"completed\" ? \"contained\" : \"outlined\"}\r\n                        color={\"primary\"}\r\n                        onClick={onClickACompletedFilter}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from \"./Todolist\";\r\nimport {v1} from \"uuid\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\ntype TodolistType = {\r\n    id: string,\r\n    title: string,\r\n    filter: FilterValuesType\r\n\r\n}\r\ntype TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n    const todoListId_1 = v1();\r\n    const todoListId_2 = v1();\r\n    const [todoList, setTodoList] = useState<Array<TodolistType>>([\r\n        {id: todoListId_1, title: \"what to learn\", filter: \"all\"},\r\n        {id: todoListId_2, title: \"what to buy\", filter: \"all\"}\r\n    ])\r\n    const [tasks, setTasks] = useState<TaskStateType>({\r\n        [todoListId_1]: [\r\n            {id: v1(), title: \"html&css\", isDone: true},\r\n            {id: v1(), title: \"home work\", isDone: true},\r\n            {id: v1(), title: \"sport\", isDone: false},\r\n\r\n        ],\r\n        [todoListId_2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"Meat\", isDone: false},\r\n            {id: v1(), title: \"Bread\", isDone: false},\r\n        ]\r\n    })\r\n\r\n    function changeTaskTitle(taskId: string, newTitle: string, todoListID: string) {\r\n        tasks[todoListID] = tasks[todoListID].map(t => t.id === taskId ? {...t, title: newTitle} : t)\r\n        setTasks({...tasks})\r\n        //setTasks({...tasks,[todoListID]:tasks[todoListID].map(t => t.id === taskId ? {...t, title: newTitle} : t)})\r\n    }\r\n\r\n    function getTaskForTodolist(todoList: TodolistType) {\r\n        switch (todoList.filter) {\r\n            case \"active\" :\r\n                return tasks[todoList.id].filter(t => t.isDone === false)\r\n\r\n            case \"completed\":\r\n                return tasks[todoList.id].filter(t => t.isDone === true)\r\n\r\n            default:\r\n                return tasks[todoList.id]\r\n        }\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todoListID: string) {\r\n        setTodoList(todoList.map(tl => tl.id === todoListID ? {...tl, filter: value} : tl))\r\n    }\r\n\r\n    function changeTodolistTitle(title: string, todoListID: string) {\r\n        setTodoList(todoList.map(tl => tl.id === todoListID ? {...tl, title: title} : tl))\r\n    }\r\n\r\n    function addTask(title: string, todoListID: string) {\r\n        const newTask: TaskType = {\r\n            id: v1(),\r\n            title: title,\r\n            isDone: false,\r\n        }\r\n        setTasks({...tasks, [todoListID]: [newTask, ...tasks[todoListID]]})\r\n    }\r\n\r\n    function changeTaskStatus(taskId: string, newIsDoneValue: boolean, todoListID: string) {\r\n        // tasks[todoListID] = tasks[todoListID].map(t => t.id === taskId ? {...t, isDone: newIsDoneValue} : t)\r\n        setTasks({\r\n            ...tasks,\r\n            [todoListID]: tasks[todoListID].map(t => t.id === taskId ? {...t, isDone: newIsDoneValue} : t)\r\n        })\r\n    }\r\n\r\n    function removeTask(taskId: string, todoListID: string) {\r\n        tasks[todoListID] = tasks[todoListID].filter(t => t.id !== taskId)\r\n        setTasks({...tasks})\r\n\r\n    }\r\n\r\n    function removeTodoList(todoListID: string) {\r\n        setTodoList(todoList.filter(tl => tl.id !== todoListID))\r\n        delete tasks[todoListID]\r\n    }\r\n\r\n    function addTodoList(title: string) {\r\n        const newTodolistID = v1()\r\n        const newTodolist: TodolistType = {id: newTodolistID, title: title, filter: \"all\"}\r\n        setTodoList([...todoList, newTodolist])\r\n        setTasks({...tasks, [newTodolistID]: []})\r\n    }\r\n\r\n\r\n    const todolistComponents = todoList.map(\r\n        tl => {\r\n            return (\r\n                <Grid item key={tl.id}>\r\n                    <Paper elevation={5} style={{padding: \"20px\"}}>\r\n                        <Todolist\r\n                            todoListID={tl.id}\r\n                            removeTask={removeTask}\r\n                            filter={tl.filter}\r\n                            tasks={getTaskForTodolist(tl)}\r\n                            title={tl.title}\r\n                            changeFilter={changeFilter}\r\n                            addTask={addTask}\r\n                            changeTaskStatus={changeTaskStatus}\r\n                            removeTodoList={removeTodoList}\r\n                            changeTaskTitle={changeTaskTitle}\r\n                            changeTodolistTitle={changeTodolistTitle}\r\n                        />\r\n                    </Paper>\r\n                </Grid>\r\n            )\r\n        }\r\n    )\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position={\"static\"}>\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton color={\"inherit\"}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={\"h6\"}>\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button variant={\"outlined\"}\r\n                            color={\"inherit\"}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px 0px\"}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todolistComponents}\r\n                </Grid>\r\n            </Container>\r\n        </div>)\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}