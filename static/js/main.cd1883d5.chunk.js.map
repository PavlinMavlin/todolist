{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","utils/error-utils.ts","features/TodolistsList/tasks-reducer.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","authAPI","data","post","get","delete","todolistsAPI","title","todolistId","put","taskId","model","ResponseStatuses","handleServerNetworkError","dispatch","message","setAppErrorAC","setAppStatusAC","handleServerAppError","messages","length","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","error","isInitialized","setIsInitializedAC","changeTaskEntityStatusAC","taskID","entityStatus","updateTaskTC","domainModel","getState","task","tasks","find","t","id","apiModel","deadline","description","priority","startDate","then","res","resultCode","action","updateTaskAC","catch","err","console","warn","AddItemForm","React","memo","props","useState","setTitle","setError","addItem","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","key","helperText","label","disabled","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","changeTitle","onDoubleClick","Task","todoListID","removeTask","changeTaskTitle","changeTaskStatus","log","onClickHandler","useCallback","onChangeHandler","checked","Completed","New","onTitleChangeHandler","className","Checkbox","Delete","Todolist","useDispatch","useEffect","items","setTasksAC","tasksJSXElements","filter","getTasksForTodoList","map","onClickAllFilter","changeFilter","onClickActiveFilter","onClickACompletedFilter","addTask","changeTodolistTitle","removeTodoList","style","listStyle","paddingLeft","Button","size","marginLeft","TodolistsList","todoList","useSelector","state","todolists","auth","todos","newTitle","success","item","addTaskAC","addTaskTC","removeTaskAC","removeTaskTC","changeTodolistFilterAC","addTodoList","todolist","addTodolistTC","changeTodolistTitleAC","changeTodoListTitleTC","todolistComponents","tl","Grid","Paper","elevation","padding","container","spacing","to","Alert","ErrorSnackbar","app","setOpen","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","name","handleChange","App","finally","AppBar","position","Toolbar","justifyContent","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCyDMC,EAOAC,E,uGA/ENC,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAMNC,EAAU,SACbC,GACF,OAAOP,EAASQ,KAAuC,cAAeD,IAFjED,EAAU,WAKf,OAAON,EAASS,IAAgE,aAL3EH,EAAU,WAQf,OAAON,EAASU,OAAqB,gBAIhCC,EAAe,WAEpB,OAAOX,EAASS,IAAyB,eAFpCE,EAAe,SAITC,GACX,OAAOZ,EAASQ,KAA2C,aAAc,CAACI,WALrED,EAAe,SAOTE,GACX,OAAOb,EAASU,OAAT,qBAA4CG,KAR9CF,EAAe,SAUTE,EAAoBD,GAC/B,OAAOZ,EAASc,IAAT,qBAAyCD,GAAc,CAACD,WAX1DD,EAAe,SAahBE,GACJ,OAAOb,EAASS,IAAT,sBAA8CI,EAA9C,YAdFF,EAAe,SAgBbE,EAAoBD,GAC3B,OAAOZ,EAASQ,KAAT,sBAA+DK,EAA/D,UAAmF,CAACD,WAjBtFD,EAAe,SAmBbE,EAAoBE,GAC3B,OAAOf,EAASU,OAAT,sBAA6CG,EAA7C,kBAAiEE,KApBnEJ,EAAe,SAsBbE,EAAoBE,EAAgBC,GAC3C,OAAOhB,EAASc,IAAT,sBAAoDD,EAApD,kBAAwEE,GAAUC,K,SA2BrFlB,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAOAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KC9EL,IC+GFkB,ED/GQC,EAA2B,SAACC,EAA6BC,GAClED,EAASE,EAAcD,IACvBD,EAASG,EAAe,YAGfC,EAAuB,SAAIhB,EAAuBY,GACvDZ,EAAKiB,SAASC,OACdN,EAASE,EAAcd,EAAKiB,SAAS,KAErCL,EAASE,EAAc,wBAE3BF,EAASG,EAAe,YETtBI,EAAe,CACjBC,YAAY,GAcHC,EAAkB,SAACC,GAAD,MAC1B,CAACC,KAAM,yBAA0BD,UChBhCH,EAAe,CACjBK,OAAQ,OACRC,MAAO,KACPC,eAAe,GAyBNC,EAAqB,SAACD,GAAD,MAA6B,CAACH,KAAM,wBAAyBG,kBAClFZ,EAAgB,SAACW,GAAD,MAA2B,CAACF,KAAM,gBAAiBE,UACnEV,EAAiB,SAACS,GAAD,MAAgC,CAACD,KAAM,iBAAkBC,WC/BnFL,EAA0C,G,QHK1CA,EAA8B,GA4DrBS,EAA2B,SAACC,EAAgBvB,EAAoBwB,GAArC,MAA0E,CAC9GP,KAAM,4BACNM,SACAvB,aAAYwB,kB,SA0CXpB,O,qBAAAA,I,iBAAAA,I,uBAAAA,M,KAME,IAoBMqB,EAAe,SAACvB,EAAgBwB,EAAwC1B,GAAzD,OACxB,SAACM,EAAiCqB,GAC9B,IACMC,EADQD,IACKE,MAAM7B,GAAY8B,MAAK,SAAAC,GAAC,OAAIA,EAAEC,KAAO9B,KACxD,GAAK0B,EAAL,CAMA,IAAMK,EAA6B,aAC/BC,SAAUN,EAAKM,SACfC,YAAaP,EAAKO,YAClBC,SAAUR,EAAKQ,SACfC,UAAWT,EAAKS,UAChBtC,MAAO6B,EAAK7B,MACZmB,OAAQU,EAAKV,QACVQ,GAEPpB,EAASG,EAAe,YACxBH,EAASgB,EAAyBpB,EAAQF,EAAY,YACtDF,EAAwBE,EAAYE,EAAQ+B,GACvCK,MAAK,SAAAC,GACF,GAA4B,IAAxBA,EAAI7C,KAAK8C,WAAkB,CAC3B,IAAMC,EA1FE,SAACvC,EAAgBC,EAAkCH,GAAnD,MACvB,CAACiB,KAAM,cAAed,QAAOH,aAAYE,UAyFXwC,CAAaxC,EAAQwB,EAAa1B,GACjDM,EAASmC,GACTnC,EAASG,EAAe,cACxBH,EAASgB,EAAyBpB,EAAQF,EAAY,mBAEtDU,EAAqB6B,EAAI7C,KAAMY,MAGtCqC,OAAM,SAACC,GACJvC,EAAyBC,EAAUsC,EAAIrC,iBA3B3CsC,QAAQC,KAAK,iC,mDIrFVC,EAlDYC,IAAMC,MAAK,SAAUC,GAI5C,MAA0BC,mBAAiB,IAA3C,mBAAOpD,EAAP,KAAcqD,EAAd,KACA,EAA0BD,mBAAwB,MAAlD,mBAAOhC,EAAP,KAAckC,EAAd,KAMMC,EAAU,WACS,KAAjBvD,EAAMwD,QACNL,EAAMI,QAAQvD,GACdqD,EAAS,KAETC,EAAS,sBAcjB,OACI,gCACI,cAACG,EAAA,EAAD,CACIC,QAAS,WACTzC,MAAOjB,EACP2D,SA5BY,SAACC,GACrBP,EAASO,EAAEC,cAAc5C,QA4BjB6C,WAjBc,SAACF,GACT,OAAVxC,GACAkC,EAAS,MAGC,UAAVM,EAAEG,KACFR,KAYIS,WAAY5C,EACZ6C,MAAO,QACP7C,QAASA,EACT8C,SAAUf,EAAMe,WAEpB,cAACC,EAAA,EAAD,CAAYC,MAAO,UAAWC,QAASd,EAASW,SAAUf,EAAMe,SAAhE,SACI,cAACI,EAAA,EAAD,YC7CHC,GAAetB,IAAMC,MAAK,SAACC,GAEpC,MAAgCC,oBAAkB,GAAlD,mBAAOoB,EAAP,KAAiBC,EAAjB,KACA,EAA0BrB,mBAAiBD,EAAMnD,OAAjD,mBAAOA,EAAP,KAAcqD,EAAd,KAYA,OACImB,EACM,cAACf,EAAA,EAAD,CACEW,MAAO,UACPV,QAAS,WACTzC,MAAOjB,EACP2D,SAXU,SAACC,GACnBP,EAASO,EAAEC,cAAc5C,QAUQyD,WAAS,EAClCC,OAhBQ,WAChBF,GAAY,GACZtB,EAAMyB,YAAY5E,IAcWkE,SAAUf,EAAMe,WACvC,sBAAMW,cAlBG,kBAAMJ,GAAY,IAkB3B,SAAkCtB,EAAMnD,W,oBCjBzC8E,GAAO7B,IAAMC,MAAK,YAOuB,IANlBzB,EAMiB,EANjBA,aACAI,EAKiB,EALjBA,KACAkD,EAIiB,EAJjBA,WACAC,EAGiB,EAHjBA,WACAC,EAEiB,EAFjBA,gBACAC,EACiB,EADjBA,iBAGhCpC,QAAQqC,IAAI1D,GAEZ,IAAM2D,EAAiBC,uBAAY,WAC/BL,EAAWnD,EAAKI,GAAI8C,KACrB,CAACC,EAAYnD,EAAMkD,IAEhBO,EAAkBD,uBAAY,SAACzB,GAAD,OAAsCsB,EAAiBrD,EAAKI,GAAI2B,EAAEC,cAAc0B,QAAUrG,EAAasG,UAAYtG,EAAauG,IAAKV,KAAa,CAACG,EAAkBrD,EAAMkD,IAEzMW,EAAuBL,uBAAY,SAACrF,GAAD,OACrCiF,EAAgBpD,EAAKI,GAAIjC,EAAO+E,KAAa,CAACE,EAAiBpD,EAAMkD,IAEzE,OAEI,gCACS,uBAAMY,UAAW9D,EAAKV,SAAWjC,EAAasG,UAAY,UAAY,GAAtE,UACD,cAACI,GAAA,EAAD,CACIxB,MAAO,UACPmB,QAAS1D,EAAKV,SAAWjC,EAAasG,UACtC7B,SAAU2B,EACVpB,SAA2B,YAAjBzC,IACZ,cAAC8C,GAAD,CAAcvE,MAAO6B,EAAK7B,MAAO4E,YAAac,EAChCxB,SAA2B,YAAjBzC,OAE9B,cAAC0C,EAAA,EAAD,CACID,SAA2B,YAAjBzC,EACV4C,QAASe,EAFb,SAGC,cAACS,GAAA,EAAD,QAbKhE,EAAKI,OCVV6D,GAAW7C,IAAMC,MAAK,SAACC,GAC5B,IAAM5C,EAAWwF,cAEjBC,qBAAU,WPuDS,IAAC/F,EOtDhBM,GPsDgBN,EOtDKkD,EAAM4B,WPsDY,SAACxE,GAChDA,EAASG,EAAe,YACxBX,EAAqBE,GAChBsC,MAAK,SAACC,GAEH,IAAMV,EAAQU,EAAI7C,KAAKsG,MACvB1F,EAbc,SAACN,EAAoB6B,GAArB,MAAiD,CACvEZ,KAAM,YACNjB,aACA6B,SAUiBoE,CAAWjG,EAAY6B,IAChCvB,EAASG,EAAe,iBAE3BkC,OAAM,SAACC,GACJtC,EAASE,EAAcoC,EAAIrC,UAC3BD,EAASG,EAAe,mBOhEzB,IAGH,IAaMyF,EAbsB,WACxB,OAAQhD,EAAMiD,QACV,IAAK,SACD,OAAOjD,EAAMrB,MAAMsE,QAAO,SAAApE,GAAC,OAAIA,EAAEb,SAAWjC,EAAauG,OAC7D,IAAK,YACD,OAAOtC,EAAMrB,MAAMsE,QAAO,SAAApE,GAAC,OAAIA,EAAEb,SAAWjC,EAAasG,aAC7D,QACI,OAAOrC,EAAMrB,OAIVuE,GAEmBC,KAAI,SAACtE,GAEnC,OACI,cAAC8C,GAAD,CACMjD,KAAMG,EACN+C,WAAY5B,EAAM4B,WAClBG,iBAAkB/B,EAAM+B,iBACxBD,gBAAiB9B,EAAM8B,gBACvBD,WAAY7B,EAAM6B,WAClBvD,aAAcO,EAAEP,cANXO,EAAEC,OAUfsE,EAAmBlB,uBAAY,kBAAMlC,EAAMqD,aAAa,MAAOrD,EAAM4B,cAAa,CAAC5B,EAAMqD,aAAcrD,EAAM4B,aAC7G0B,EAAsBpB,uBAAY,kBAAMlC,EAAMqD,aAAa,SAAUrD,EAAM4B,cAAa,CAAC5B,EAAMqD,aAAcrD,EAAM4B,aACnH2B,EAA0BrB,uBAAY,kBAAMlC,EAAMqD,aAAa,YAAarD,EAAM4B,cAAa,CAAC5B,EAAMqD,aAAcrD,EAAM4B,aAI1H4B,EAAUtB,uBAAY,SAACrF,GACzBmD,EAAMwD,QAAQ3G,EAAOmD,EAAM4B,cAC5B,CAAC5B,EAAMwD,QAASxD,EAAM4B,aAEnB6B,EAAsBvB,uBAAY,SAACrF,GAAD,OAAmBmD,EAAMyD,oBAAoB5G,EAAOmD,EAAM4B,cAAa,CAAC5B,EAAMyD,oBAAqBzD,EAAM4B,aAEjJ,OAEI,gCACI,+BACI,cAACR,GAAD,CAAcvE,MAAOmD,EAAMnD,MAAO4E,YAAagC,EAAsB1C,SAA+B,YAArBf,EAAM1B,eACrF,cAAC0C,EAAA,EAAD,CACIE,QAdc,kBAAMlB,EAAM0D,eAAe1D,EAAM4B,aAe/Cb,SAA+B,YAArBf,EAAM1B,aAFpB,SAGI,cAACoE,GAAA,EAAD,SAGR,cAAC,EAAD,CAAatC,QAASoD,EAASzC,SAA+B,YAArBf,EAAM1B,eAE/C,oBAAIqF,MAAO,CAACC,UAAW,OAAQC,YAAa,OAA5C,SAEQb,IAKR,gCACI,cAACc,EAAA,EAAD,CAAQC,KAAM,QACNxD,QAA0B,QAAjBP,EAAMiD,OAAmB,YAAc,WAChDhC,MAAO,UACPC,QAASkC,EAHjB,iBAKA,cAACU,EAAA,EAAD,CAAQH,MAAO,CAACK,WAAY,OACpBD,KAAM,QACNxD,QAA0B,WAAjBP,EAAMiD,OAAsB,YAAc,WACnDhC,MAAO,UACPC,QAASoC,EAJjB,oBAMA,cAACQ,EAAA,EAAD,CAAQC,KAAM,QACNxD,QAA0B,cAAjBP,EAAMiD,OAAyB,YAAc,WACtDhC,MAAO,UACPC,QAASqC,EAHjB,gC,SCrFPU,GAA0B,WACnC,IAAMC,EAAWC,aAAoD,SAAAC,GAAK,OAAIA,EAAMC,aAC9E1F,EAAQwF,aAA6C,SAAAC,GAAK,OAAIA,EAAMzF,SACpEvB,EAAWwF,cACXhF,EAAauG,aAAuC,SAAAC,GAAK,OAAIA,EAAME,KAAK1G,cAE9EiF,qBAAU,WACDjF,GAGLR,GLc6B,SAACA,GAClCA,EAASG,EAAe,YACxBX,IACKwC,MAAK,SAACC,GACH,IAAIkF,EAAQlF,EAAI7C,KAChBY,EARkD,CAACW,KAAM,gBAAiBsG,UAQvDE,IACnBnH,EAASG,EAAe,iBAE3BkC,OAAM,SAACC,GACJtC,EAASE,EAAcoC,EAAIrC,UAC3BD,EAASG,EAAe,mBKvB7B,IAEHoC,QAAQqC,IAAIrD,GAIZ,IAAMmD,EAAkBI,uBAAY,SAAClF,EAAgBwH,EAAkB5C,GACnExE,EAASmB,EAAavB,EAAQ,CAACH,MAAO2H,GAAW5C,MAClD,CAACxE,IAEEoG,EAAUtB,uBAAY,SAACrF,EAAe+E,GACxCxE,ER8EiB,SAACP,EAAe+E,GAAhB,OAAuC,SAACxE,GAC7DA,EAASG,EAAe,YAExBX,EAAwBgF,EAAY/E,GAC/BuC,MAAK,SAACC,GAEH,GAAIA,EAAI7C,KAAK8C,aAAepC,EAAiBuH,QAAS,CAClD,IAAM/F,EAAOW,EAAI7C,KAAKA,KAAKkI,KAE3BtH,EApDS,SAACsB,GAAD,MAAqB,CAACX,KAAM,WAAYW,QAoDxCiG,CAAUjG,IACnBtB,EAASG,EAAe,mBAGxBC,EAAqB6B,EAAI7C,KAAMY,MAGtCqC,OAAM,SAACC,GACJvC,EAAyBC,EAAUsC,EAAIrC,aQ/FlCuH,CAAU/H,EAAO+E,MAC3B,CAACxE,IAEE2E,EAAmBG,uBAAY,SAAClF,EAAgBgB,EAAsBlB,GACxEM,EAASmB,EAAavB,EAAQ,CAACgB,UAASlB,MACzC,CAACM,IAEEyE,EAAaK,uBAAY,SAAC7D,EAAgBuD,GAC5CxE,ERiDoB,SAACiB,EAAgBvB,GAAjB,OAAwC,SAACM,GACjEA,EAASG,EAAe,YACxBH,EAASgB,EAAyBC,EAAQvB,EAAY,YACtDF,EAAwBE,EAAYuB,GAC/Be,MAAK,SAACC,GACHjC,EA5BgB,SAACiB,EAAgBvB,GAAjB,MAAyC,CAACiB,KAAM,cAAeM,SAAQvB,cA4B9E+H,CAAaxG,EAAQvB,IAC9BM,EAASG,EAAe,cACxBH,EAASgB,EAAyBC,EAAQvB,EAAY,iBAEzD2C,OAAM,SAACC,GACJtC,EAASE,EAAcoC,EAAIrC,UAC3BD,EAASG,EAAe,eQ5DnBuH,CAAazG,EAAQuD,MAC/B,CAACxE,IAGEiG,EAAenB,uBAAY,SAACpE,EAAyB8D,GACvDxE,ELnB8B,SAAC6F,EAA0BrB,GAA3B,MAAmD,CACrF7D,KAAM,yBACNkF,OAAQA,EACRrB,WAAYA,GKgBCmD,CAAuBjH,EAAO8D,MACxC,CAACxE,IAEEsG,EAAiBxB,uBAAY,SAACN,GAChC,ILFyB9E,EKErByC,GLFqBzC,EKEK8E,ELFkB,SAACxE,GACrDA,EAASG,EAAe,YACxBH,EAlC0F,CAC1FW,KAAM,gCACNO,aAgCkD,UAhCpCQ,GAgCwBhC,IACtCF,EAA4BE,GACvBsC,MAAK,WACFhC,EAjC6C,CAACW,KAAM,kBAAmB6D,WAiC7C9E,IAC1BM,EAASG,EAAe,iBAE3BkC,OAAM,SAACC,GACJtC,EAASE,EAAcoC,EAAIrC,UAC3BD,EAASG,EAAe,gBKN5BH,EAASmC,KAEV,CAACnC,IAEE4H,EAAc9C,uBAAY,SAACrF,GAC7B,IAAI0C,ELIiB,SAAC1C,GAAD,OAAmB,SAACO,GAC7CA,EAASG,EAAe,YACxBX,EAA4BC,GACvBuC,MAAK,SAACC,GAEwB,GAAvBA,EAAI7C,KAAK8C,YACTlC,EA9C0C,CAACW,KAAM,eAAgBkH,SA8C1C5F,EAAI7C,KAAKA,KAAKkI,OACrCtH,EAASG,EAAe,gBAEpB8B,EAAI7C,KAAKiB,SAASC,OAClBN,EAASE,EAAc+B,EAAI7C,KAAKiB,SAAS,KAEzCL,EAASE,EAAc,wBAE3BF,EAASG,EAAe,gBKlBnB2H,CAAcrI,GAC3BO,EAASmC,KAEV,CAACnC,IAEEqG,EAAsBvB,uBAAY,SAACrF,EAAe+E,GACpDxE,ELgB6B,SAACP,EAAe+E,GAAhB,OAAuC,SAACxE,GACzEA,EAASG,EAAe,YACxBX,EAA4BgF,EAAY/E,GACnCuC,MAAK,WACFhC,EA7DyB,SAACP,EAAe+E,GAAhB,MAAwC,CACzE7D,KAAM,wBACNlB,MAAOA,EACP+E,WAAYA,GA0DKuD,CAAsBtI,EAAO+E,IACtCxE,EAASG,EAAe,iBAE3BkC,OAAM,SAACC,GACJtC,EAASE,EAAcoC,EAAIrC,UAC3BD,EAASG,EAAe,eKzBnB6H,CAAsBvI,EAAO+E,MACvC,CAACxE,IAGEiI,EAAqBnB,EAASf,KAChC,SAAAmC,GACI,OACI,cAACC,EAAA,EAAD,CAAMb,MAAI,EAAV,SACI,cAACc,EAAA,EAAD,CAAOC,UAAW,EAAG9B,MAAO,CAAC+B,QAAS,QAAtC,SACI,cAAC/C,GAAD,CACIrE,aAAcgH,EAAGhH,aACjBsD,WAAY0D,EAAGxG,GACf+C,WAAYA,EACZoB,OAAQqC,EAAGrC,OACXtE,MAAOA,EAAM2G,EAAGxG,IAChBjC,MAAOyI,EAAGzI,MACVwG,aAAcA,EACdG,QAASA,EACTzB,iBAAkBA,EAClB2B,eAAgBA,EAChB5B,gBAAiBA,EACjB2B,oBAAqBA,OAdjB6B,EAAGxG,OAsB/B,OAAKlB,EAGE,qCACH,cAAC2H,EAAA,EAAD,CAAMI,WAAS,EAAChC,MAAO,CAAC+B,QAAS,YAAjC,SACI,cAAC,EAAD,CAAatF,QAAS4E,MAE1B,cAACO,EAAA,EAAD,CAAMI,WAAS,EAACC,QAAS,EAAzB,SACKP,OAPE,cAAC,KAAD,CAAUQ,GAAI,Y,8BChG7B,SAASC,GAAM9F,GACX,OAAO,cAAC,KAAD,aAAUyF,UAAW,EAAGlF,QAAQ,UAAaP,IAGjD,SAAS+F,KAEZ,IAAM9H,EAAQkG,aAA6C,SAAAC,GAAK,OAAIA,EAAM4B,IAAI/H,SACxEb,EAAWwF,cACjB,EAAwB9C,IAAMG,UAAS,GAAvC,mBAAagG,GAAb,WAEMC,EAAc,SAACC,EAA8BC,GAChC,cAAXA,IAGJH,GAAQ,GACR7I,EAASE,EAAc,SAG3B,OACI,cAAC+I,GAAA,EAAD,CAAUC,KAAgB,OAAVrI,EAAgBsI,iBAAkB,IAAMC,QAASN,EAAjE,SACI,cAAC,GAAD,CAAOM,QAASN,EAAaO,SAAS,QAAtC,SACKxI,M,qDCpBJyI,GAAQ,WAEjB,IAAMtJ,EAAWwF,cACXhF,EAAauG,aAAuC,SAAAC,GAAK,OAAIA,EAAME,KAAK1G,cAQxE+I,EAASC,aAAU,CACrBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,GAEhBC,SAAU,SAACC,GACP,IAAMC,EAA0B,GAYhC,OAXKD,EAAOJ,MAEA,4CAA4CM,KAAKF,EAAOJ,SAChEK,EAAOL,MAAQ,yBAFfK,EAAOL,MAAQ,WAKdI,EAAOH,SAEDG,EAAOH,SAASrJ,OAAS,IAChCyJ,EAAOJ,SAAW,kCAFlBI,EAAOJ,SAAW,WAIfI,GAEXE,SAAU,SAAAH,GTbK,IAAC1K,ESeZY,GTfYZ,ESeK0K,ETfqB,SAAC9J,GAC/CA,EAASG,EAAe,YACxBhB,EAAcC,GACT4C,MAAK,SAAAC,GAC0B,IAAxBA,EAAI7C,KAAK8C,YAETlC,EAASS,GAAgB,IACzBT,EAASG,EAAe,eAExBC,EAAqB6B,EAAI7C,KAAMY,MAGtCqC,OAAM,SAACC,GACJvC,EAAyBC,EAAUsC,EAAIrC,eSGvCsJ,EAAOW,eAIf,OAAI1J,EACO,cAAC,KAAD,CAAUiI,GAAI,MAElB,cAACN,EAAA,EAAD,CAAMI,WAAS,EAAC4B,QAAQ,SAAxB,SACH,cAAChC,EAAA,EAAD,CAAMb,MAAI,EAAC8C,GAAI,EAAf,SACI,sBAAMH,SAAUV,EAAOc,aAAvB,SACI,eAACC,GAAA,EAAD,WACI,eAACC,GAAA,EAAD,WACI,yDACI,mBAAGC,KAAM,wCACNC,OAAQ,SADX,qBAIJ,wEACA,0DACA,kDAEJ,eAACC,GAAA,EAAD,WACI,cAACxH,EAAA,EAAD,aACIQ,MAAM,QACNiH,OAAO,UACHpB,EAAOqB,cAAc,WAG5BrB,EAAOQ,OAAOL,OAASH,EAAOsB,QAAQnB,OACvC,qBAAKnD,MAAO,CAAC1C,MAAO,OAApB,SAA6B0F,EAAOQ,OAAOL,QAC3C,cAACxG,EAAA,EAAD,aACIvC,KAAK,WACL+C,MAAM,WACNiH,OAAO,UACHpB,EAAOqB,cAAc,cAI5BrB,EAAOsB,QAAQnB,OAASH,EAAOQ,OAAOJ,UACvC,qBAAKpD,MAAO,CAAC1C,MAAO,OAApB,SAA6B0F,EAAOQ,OAAOJ,WAC3C,cAACmB,GAAA,EAAD,CACIpH,MAAO,cACPqH,QAAS,cAAC1F,GAAA,EAAD,CACL2F,KAAM,aACN5H,SAAUmG,EAAO0B,aACjBvK,MAAO6I,EAAOO,OAAOF,eAG7B,cAAClD,EAAA,EAAD,CAAQ/F,KAAM,SAAUwC,QAAS,YAAaU,MAAO,UAArD,gCCrBTqH,OAjDf,WACI,IAAMtK,EAASmG,aAAiD,SAAAC,GAAK,OAAIA,EAAM4B,IAAIhI,UAC7EZ,EAAWwF,cACX1E,EAAgBiG,aAAuC,SAAAC,GAAK,OAAIA,EAAM4B,IAAI9H,iBAC1EN,EAAauG,aAAuC,SAAAC,GAAK,OAAIA,EAAME,KAAK1G,cAK9E,OAJAiF,qBAAU,WACNzF,GTW6B,SAACA,GAClCb,IAAa6C,MAAK,SAAAC,GAEc,IAAxBA,EAAI7C,KAAK8C,aACTlC,EAASS,GAAgB,IACzBT,EAASe,GAAmB,QAM/BoK,SAAQ,WACLnL,EAASe,GAAmB,YStBjC,IAEED,EAYD,sBAAKsE,UAAU,MAAf,UACI,cAACuD,GAAD,IACA,eAACyC,EAAA,EAAD,CAAQC,SAAU,SAAlB,UACI,eAACC,EAAA,EAAD,CAAS/E,MAAO,CAACgF,eAAgB,iBAAjC,UACI,cAAC3H,EAAA,EAAD,CAAYC,MAAO,UAAnB,SACI,cAAC2H,EAAA,EAAD,MAEJ,cAACC,EAAA,EAAD,CAAYtI,QAAS,KAArB,uBAGC3C,GAAc,cAACkG,EAAA,EAAD,CAAQvD,QAAS,WAAYW,QAftC,WAClB9D,GVKsB,SAACA,GAC3BA,EAASG,EAAe,YACxBhB,IACK6C,MAAK,SAAAC,GAC0B,IAAxBA,EAAI7C,KAAK8C,YACTlC,EAASS,GAAgB,IACzBT,EAASG,EAAe,eAExBC,EAAqB6B,EAAI7C,KAAMY,MAGtCqC,OAAM,SAACxB,GACJd,EAAyBC,EAASa,UUFHgD,MAAO,UADf,wBAGP,YAAXjD,GAAwB,cAAC8K,GAAA,EAAD,CAAgB7H,MAAO,iBAEpD,cAAC8H,EAAA,EAAD,CAAWC,OAAK,EAAhB,SACI,eAAC,KAAD,WACI,cAAC,KAAD,CAAOC,OAAK,EAACC,KAAM,IAAKC,OAAQ,kBAAM,cAAC,GAAD,OACtC,cAAC,KAAD,CAAOD,KAAM,SAAUC,OAAQ,kBAAM,cAAC,GAAD,OACrC,cAAC,KAAD,CAAOD,KAAM,OAAQC,OAAQ,kBAAM,wDACnC,cAAC,KAAD,CAAUC,KAAM,IAAKvD,GAAI,iBA/B9B,qBACHlC,MAAO,CAAC8E,SAAU,QAASY,IAAK,MAAOC,UAAW,SAAUC,MAAO,QADhE,SAEH,cAACC,EAAA,EAAD,O,kBCvBNC,GAAcC,aAAgB,CAChC/K,MZAwB,WAA+D,IAA9DyF,EAA6D,uDAArDzG,EAAc4B,EAAuC,uCACtF,OAAQA,EAAOxB,MACX,IAAK,YACD,OAAO,2BACAqG,GADP,kBAEK7E,EAAOzC,WAAayC,EAAOZ,MAAMwE,KAAI,SAAAtE,GAAC,kCAASA,GAAT,IAAYP,aAAc,cAGzE,IAAK,cACD,OAAO,2BACA8F,GADP,kBAEK7E,EAAOzC,WAAasH,EAAM7E,EAAOzC,YAAYmG,QAAO,SAAApE,GAAC,OAAIA,EAAEC,KAAOS,EAAOlB,YAElF,IAAK,WACD,OAAO,2BACA+F,GADP,kBAEK7E,EAAOb,KAAKiL,WAAa,CAACpK,EAAOb,MAAR,mBAAiB0F,EAAM7E,EAAOb,KAAKiL,cAAaxG,KAAI,SAAAtE,GAAC,kCACxEA,GADwE,IAE3EP,aAAc,cAI1B,IAAK,cACD,OAAO,2BACA8F,GADP,kBAEK7E,EAAOzC,WAAasH,EAAM7E,EAAOzC,YAC7BqG,KAAI,SAAAtE,GAAC,OAAIA,EAAEC,KAAOS,EAAOvC,OAAhB,2BAA6B6B,GAAMU,EAAOtC,OAAS4B,OAEzE,IAAK,eACD,OAAO,2BACAuF,GADP,kBAEK7E,EAAO0F,SAASnG,GAAK,KAG9B,IAAK,kBACD,IAAI8K,EAAS,eAAOxF,GAEpB,cADOwF,EAAUrK,EAAOqC,YACjBgI,EAEX,IAAK,gBACD,IAAMA,EAAS,eAAOxF,GAItB,OAHA7E,EAAO8E,UAAUwF,SAAQ,SAACvE,GACtBsE,EAAUtE,EAAGxG,IAAM,MAEhB8K,EAEX,IAAK,4BAED,OADAjK,QAAQqC,IAAIzC,GACL,2BACA6E,GADP,kBAEK7E,EAAOzC,WAAasH,EAAM7E,EAAOzC,YAC7BqG,KAAI,SAAAtE,GAAC,OAAIA,EAAEC,KAAOS,EAAOlB,OAAhB,2BAA6BQ,GAA7B,IAAgCP,aAAciB,EAAOjB,eAAgBO,OAE3F,QACI,OAAOuF,IYrDfC,UTN4B,WAA2E,IAA1ED,EAAyE,uDAAjEzG,EAAc4B,EAAmD,uCACtG,OAAQA,EAAOxB,MACX,IAAK,gBACD,OAAOwB,EAAO8E,UAAUlB,KAAI,SAAAmC,GAAE,kCAASA,GAAT,IAAarC,OAAQ,MAAO3E,aAAc,YAC5E,IAAK,kBACD,OAAO8F,EAAMnB,QAAO,SAAAqC,GAAE,OAAIA,EAAGxG,KAAOS,EAAOqC,cAC/C,IAAK,eACD,MAAM,CAAN,2BAAYrC,EAAO0F,UAAnB,IAA6BhC,OAAQ,MAAO3E,aAAc,UAA1D,mBAAsE8F,IAC1E,IAAK,wBACD,OAAOA,EAAMjB,KAAI,SAAAmC,GAAE,OAAIA,EAAGxG,KAAOS,EAAOqC,WAAjB,2BAAkC0D,GAAlC,IAAsCzI,MAAO0C,EAAO1C,QAASyI,KACxF,IAAK,yBACD,OAAOlB,EAAMjB,KAAI,SAAAmC,GAAE,OAAIA,EAAGxG,KAAOS,EAAOqC,WAAjB,2BAAkC0D,GAAlC,IAAsCrC,OAAQ1D,EAAO0D,SAAUqC,KAC1F,IAAK,gCACD,OAAOlB,EAAMjB,KAAI,SAAAmC,GAAE,OAAIA,EAAGxG,KAAOS,EAAOT,GAAjB,2BAA0BwG,GAA1B,IAA8BhH,aAAciB,EAAOjB,eAAgBgH,KAC9F,QACI,OAAOlB,ISRf4B,IVQsB,WAAoF,IAAnF5B,EAAkF,uDAAxDzG,EAAc4B,EAA0C,uCACzG,OAAQA,EAAOxB,MACX,IAAK,iBACD,OAAO,2BAAIqG,GAAX,IAAkBpG,OAAQuB,EAAOvB,SACrC,IAAK,gBACD,OAAO,2BAAIoG,GAAX,IAAkBnG,MAAOsB,EAAOtB,QACpC,IAAK,wBACD,OAAO,2BAAImG,GAAX,IAAkBlG,cAAeqB,EAAOrB,gBAE5C,QACI,OAAO,eAAIkG,KUjBnBE,KXHuB,WAAoF,IAAnFF,EAAkF,uDAAxDzG,EAAc4B,EAA0C,uCAC1G,OAAQA,EAAOxB,MACX,IAAK,yBACD,OAAO,2BAAIqG,GAAX,IAAkBxG,WAAY2B,EAAOzB,QACzC,QACI,OAAOsG,MWCN0F,GAAQC,aAAYN,GAAaO,aAAgBC,OAM9DtO,OAAOmO,MAAQA,G,aCbfI,IAASf,OACL,cAAC,IAAD,CAAUW,MAAOA,GAAjB,SACI,cAAC,KAAD,UACA,cAAC,GAAD,QAESK,SAASC,eAAe,ShB4HnC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnL,MAAK,SAAAoL,GACJA,EAAaC,gBAEdhL,OAAM,SAAAxB,GACL0B,QAAQ1B,MAAMA,EAAMZ,c","file":"static/js/main.cd1883d5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\nimport {RequestStatusType} from \"../app/app-reducer\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'b5f63428-88b9-4342-8c9b-16d46fb30269'\r\n    }\r\n})\r\n\r\n//   api\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId: number }>>('/auth/login', data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{ id: number, email: string, login: string }>>('/auth/me')\r\n    },\r\n    logout(){\r\n        return instance.delete<ResponseType>('/auth/login')\r\n    }\r\n}\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistType>>('todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n    getTask(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`/todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`/todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`/todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n\r\n}\r\n\r\n// types\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    fieldsErrors: string[]\r\n    messages: string[]\r\n    data: D\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3,\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4,\r\n}\r\n\r\n\r\nexport type TaskType = {\r\n    addedDate: string\r\n    deadline: string\r\n    description: string\r\n    id: string\r\n    order: number\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    status: TaskStatuses\r\n    title: string\r\n    todoListId: string\r\n    entityStatus: RequestStatusType\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    items: Array<TaskType>\r\n    totalCount: number\r\n\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n","import {setAppErrorAC, setAppStatusAC,} from '../app/app-reducer';\r\nimport {Dispatch} from 'redux';\r\nimport {ResponseType} from '../api/todolists-api';\r\n\r\nexport const handleServerNetworkError = (dispatch: Dispatch<ErrorAT>, message: string) => {\r\n    dispatch(setAppErrorAC(message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: Dispatch<ErrorAT>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport type ErrorAT = ReturnType<typeof setAppErrorAC> | ReturnType<typeof setAppStatusAC>\r\n\r\n","import {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from \"../../api/todolists-api\";\r\nimport {addTodoListAC, changeTodolistEntityStatusAC, removeTodoListAC, setTodoAC} from \"./todolists-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {TaskStateType} from \"../../app/App\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {RequestStatusType, setAppErrorAC, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {AxiosError} from \"axios\";\r\n\r\n\r\nlet initialState: TaskStateType = {}\r\nexport const tasksReducer = (state = initialState, action: ActionsType): TaskStateType => {\r\n    switch (action.type) {\r\n        case \"SET-TASKS\":\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: action.tasks.map(t => ({...t, entityStatus: 'idle'}))\r\n            }\r\n\r\n        case 'REMOVE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskID)\r\n            }\r\n        case \"ADD-TASK\":\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: [action.task, ...state[action.task.todoListId]].map(t => ({\r\n                    ...t,\r\n                    entityStatus: 'idle'\r\n                }))\r\n            }\r\n\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case \"ADD-TODOLIST\": {\r\n            return {\r\n                ...state,\r\n                [action.todolist.id]: []\r\n            }\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            let copyState = {...state}\r\n            delete copyState[action.todoListID]\r\n            return copyState\r\n        }\r\n        case \"SET-TODOLISTS\": {\r\n            const copyState = {...state}\r\n            action.todolists.forEach((tl) => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState;\r\n        }\r\n        case \"CHANGE-TASK-ENTITY-STATUS\":\r\n            console.log(action)\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskID ? {...t, entityStatus: action.entityStatus} : t)\r\n            }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n// Actions\r\nexport const changeTaskEntityStatusAC = (taskID: string, todolistId: string, entityStatus: RequestStatusType) => ({\r\n    type: \"CHANGE-TASK-ENTITY-STATUS\",\r\n    taskID,\r\n    todolistId, entityStatus\r\n} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const removeTaskAC = (taskID: string, todolistId: string) => ({type: 'REMOVE-TASK', taskID, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: \"ADD-TASK\", task} as const)\r\nexport const setTasksAC = (todolistId: string, tasks: Array<TaskType>) => ({\r\n    type: \"SET-TASKS\",\r\n    todolistId,\r\n    tasks\r\n} as const)\r\n\r\n//thunk\r\nexport const fetchTaskTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistsAPI.getTask(todolistId)\r\n        .then((res) => {\r\n\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(todolistId, tasks))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            dispatch(setAppErrorAC(err.message))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskID: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    dispatch(changeTaskEntityStatusAC(taskID, todolistId, \"loading\"))\r\n    todolistsAPI.deleteTask(todolistId, taskID)\r\n        .then((res) => {\r\n            dispatch(removeTaskAC(taskID, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(changeTaskEntityStatusAC(taskID, todolistId, \"succeeded\"))\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            dispatch(setAppErrorAC(err.message))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\n\r\nenum ResponseStatuses {\r\n    success = 0,\r\n    error = 1,\r\n    captcha = 10\r\n}\r\n\r\nexport const addTaskTC = (title: string, todoListID: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n\r\n    todolistsAPI.createTask(todoListID, title)\r\n        .then((res) => {\r\n\r\n            if (res.data.resultCode === ResponseStatuses.success) {\r\n                const task = res.data.data.item\r\n\r\n                dispatch(addTaskAC(task))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        dispatch(changeTaskEntityStatusAC(taskId, todolistId, \"loading\"))\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                    dispatch(changeTaskEntityStatusAC(taskId, todolistId, \"succeeded\"))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                handleServerNetworkError(dispatch, err.message)\r\n            })\r\n\r\n    }\r\n\r\n//types\r\nexport type ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | ReturnType<typeof removeTodoListAC>\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof addTodoListAC>\r\n    | ReturnType<typeof setTodoAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n    | ReturnType<typeof changeTaskEntityStatusAC>\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {setAppErrorAC, setAppStatusAC} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {AxiosError} from \"axios\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                debugger\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            }else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(dispatch,error )\r\n        })\r\n}\r\n\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n\r\n\r\n","import {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\ntype InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized: boolean\r\n\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-ISINITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\nexport const setIsInitializedAC = (isInitialized: boolean) => ({type: 'APP/SET-ISINITIALIZED', isInitialized} as const)\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true));\r\n            dispatch(setIsInitializedAC(true))\r\n        } else {\r\n\r\n        }\r\n\r\n    })\r\n        .finally(()=>{\r\n            dispatch(setIsInitializedAC(true))\r\n        })\r\n}\r\n\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof setIsInitializedAC>\r\n\r\n","import {todolistsAPI, TodolistType} from \"../../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppErrorAC, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\n\r\nlet initialState: Array<TodolistDomainType> = []\r\nexport const todoListsReducer = (state = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case \"SET-TODOLISTS\":\r\n            return action.todolists.map(tl => ({...tl, filter: \"all\", entityStatus: 'idle'}))\r\n        case \"REMOVE-TODOLIST\":\r\n            return state.filter(tl => tl.id !== action.todoListID)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case \"CHANGE-TODOLIST-TITLE\":\r\n            return state.map(tl => tl.id === action.todoListID ? {...tl, title: action.title} : tl)\r\n        case \"CHANGE-TODOLIST-FILTER\":\r\n            return state.map(tl => tl.id === action.todoListID ? {...tl, filter: action.filter} : tl)\r\n        case \"CHANGE-TODOLIST-ENTITY-STATUS\":\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => ({\r\n    type: \"CHANGE-TODOLIST-ENTITY-STATUS\",\r\n    entityStatus, id\r\n} as const)\r\nexport const removeTodoListAC = (todoListID: string) => ({type: 'REMOVE-TODOLIST', todoListID} as const)\r\nexport const addTodoListAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (title: string, todoListID: string) => ({\r\n    type: \"CHANGE-TODOLIST-TITLE\",\r\n    title: title,\r\n    todoListID: todoListID\r\n} as const)\r\nexport const changeTodolistFilterAC = (filter: FilterValuesType, todoListID: string) => ({\r\n    type: \"CHANGE-TODOLIST-FILTER\",\r\n    filter: filter,\r\n    todoListID: todoListID\r\n} as const)\r\nexport const setTodoAC = (todolists: Array<TodolistType>) => ({type: \"SET-TODOLISTS\", todolists} as const)\r\n\r\n//thunks\r\nexport const fetchTodolistTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistsAPI.getTodolists()\r\n        .then((res) => {\r\n            let todos = res.data\r\n            dispatch(setTodoAC(todos))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            dispatch(setAppErrorAC(err.message))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\nexport const removeTodoListTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, \"loading\"))\r\n    todolistsAPI.deleteTodolist(todolistId)\r\n        .then(() => {\r\n            dispatch(removeTodoListAC(todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            dispatch(setAppErrorAC(err.message))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistsAPI.createTodolist(title)\r\n        .then((res) => {\r\n            debugger\r\n            if (res.data.resultCode == 0) {\r\n                dispatch(addTodoListAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                if (res.data.messages.length) {\r\n                    dispatch(setAppErrorAC(res.data.messages[0]))\r\n                } else {\r\n                    dispatch(setAppErrorAC(\"Some error occurred\"))\r\n                }\r\n                dispatch(setAppStatusAC('failed'))\r\n            }\r\n        })\r\n}\r\nexport const changeTodoListTitleTC = (title: string, todoListID: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistsAPI.updateTodolist(todoListID, title)\r\n        .then(() => {\r\n            dispatch(changeTodolistTitleAC(title, todoListID))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            dispatch(setAppErrorAC(err.message))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\n\r\n//types\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\nexport type ActionsType =\r\n    | ReturnType<typeof removeTodoListAC>\r\n    | ReturnType<typeof addTodoListAC>\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | ReturnType<typeof setTodoAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\n\r\n\r\n  export type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n      disabled?: boolean\r\n}\r\n\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n\r\n\r\n\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n\r\n    }\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n\r\n        if (e.key === \"Enter\") {\r\n            addItem()\r\n        }\r\n    }\r\n    // const errorMessage = error ? <div style={{color: \"red\"}}>Title is required</div> : null\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={\"outlined\"}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                helperText={error}\r\n                label={\"Title\"}\r\n                error={!!error}\r\n                disabled={props.disabled}\r\n            />\r\n            <IconButton color={\"primary\"} onClick={addItem} disabled={props.disabled}>\r\n                <AddBox/>\r\n            </IconButton>\r\n            {/*{errorMessage}*/}\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default AddItemForm","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype EditableSpan = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpan) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                color={\"primary\"}\r\n                variant={\"standard\"}\r\n                value={title}\r\n                onChange={onChangeTitle} autoFocus\r\n                onBlur={offEditMode} disabled={props.disabled}/>\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n})\r\n\r\n","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolists-api\";\r\nimport {RequestStatusType} from \"../../../../app/app-reducer\";\r\n\r\nexport type TaskPropsType = {\r\n    entityStatus: RequestStatusType\r\n    task: TaskType\r\n    removeTask: (taskId: string, todoListID: string) => void\r\n    todoListID: string\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todoListID: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todoListID: string) => void\r\n}\r\n\r\nexport const Task = React.memo(({\r\n                                    entityStatus,\r\n                                    task,\r\n                                    todoListID,\r\n                                    removeTask,\r\n                                    changeTaskTitle,\r\n                                    changeTaskStatus\r\n                                }: TaskPropsType) => {\r\n\r\n    console.log(entityStatus)\r\n\r\n    const onClickHandler = useCallback(() => {\r\n        removeTask(task.id, todoListID)\r\n    }, [removeTask, task, todoListID])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => changeTaskStatus(task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New, todoListID), [changeTaskStatus, task, todoListID])\r\n\r\n    const onTitleChangeHandler = useCallback((title: string) =>\r\n        changeTaskTitle(task.id, title, todoListID), [changeTaskTitle, task, todoListID])\r\n\r\n    return (\r\n\r\n        <div key={task.id}>\r\n                 <span className={task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n                <Checkbox\r\n                    color={\"primary\"}\r\n                    checked={task.status === TaskStatuses.Completed}\r\n                    onChange={onChangeHandler}\r\n                    disabled={entityStatus === \"loading\"}\r\n                /><EditableSpan title={task.title} changeTitle={onTitleChangeHandler}\r\n                                disabled={entityStatus === \"loading\"}/>\r\n                 </span>\r\n            <IconButton\r\n                disabled={entityStatus === \"loading\"}\r\n                onClick={onClickHandler}\r\n            ><Delete/></IconButton>\r\n        </div>)\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport AddItemForm from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolists-api\";\r\nimport {FilterValuesType} from \"../todolists-reducer\";\r\nimport {fetchTaskTC} from \"../tasks-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\n\r\nexport type PropsTypeTodolist = {\r\n    entityStatus: RequestStatusType\r\n    todoListID: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    removeTask: (taskId: string, todoListID: string) => void\r\n    changeFilter: (value: FilterValuesType, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeTodolistTitle: (title: string, todoListID: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todoListID: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todoListID: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsTypeTodolist) => {\r\n        const dispatch = useDispatch()\r\n\r\n        useEffect(() => {\r\n            dispatch(fetchTaskTC(props.todoListID))\r\n        }, [])\r\n\r\n\r\n        const getTasksForTodoList = () => {\r\n            switch (props.filter) {\r\n                case \"active\":\r\n                    return props.tasks.filter(t => t.status === TaskStatuses.New)\r\n                case \"completed\":\r\n                    return props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n                default:\r\n                    return props.tasks\r\n            }\r\n        }\r\n\r\n        let newTasks = getTasksForTodoList()\r\n\r\n        const tasksJSXElements = newTasks.map((t: TaskType) => {\r\n\r\n            return (\r\n                <Task key={t.id}\r\n                      task={t}\r\n                      todoListID={props.todoListID}\r\n                      changeTaskStatus={props.changeTaskStatus}\r\n                      changeTaskTitle={props.changeTaskTitle}\r\n                      removeTask={props.removeTask}\r\n                      entityStatus={t.entityStatus}\r\n                />)\r\n        })\r\n\r\n        const onClickAllFilter = useCallback(() => props.changeFilter(\"all\", props.todoListID), [props.changeFilter, props.todoListID])\r\n        const onClickActiveFilter = useCallback(() => props.changeFilter(\"active\", props.todoListID), [props.changeFilter, props.todoListID])\r\n        const onClickACompletedFilter = useCallback(() => props.changeFilter(\"completed\", props.todoListID), [props.changeFilter, props.todoListID])\r\n\r\n        const OnclickRemoveTodoList = () => props.removeTodoList(props.todoListID)\r\n\r\n        const addTask = useCallback((title: string) => {\r\n            props.addTask(title, props.todoListID)\r\n        }, [props.addTask, props.todoListID])\r\n\r\n        const changeTodolistTitle = useCallback((title: string) => props.changeTodolistTitle(title, props.todoListID), [props.changeTodolistTitle, props.todoListID])\r\n\r\n        return (\r\n\r\n            <div>\r\n                <h3>\r\n                    <EditableSpan title={props.title} changeTitle={changeTodolistTitle}  disabled={props.entityStatus===\"loading\"}/>\r\n                    <IconButton\r\n                        onClick={OnclickRemoveTodoList}\r\n                        disabled={props.entityStatus===\"loading\"}>\r\n                        <Delete/>\r\n                    </IconButton>\r\n                </h3>\r\n                <AddItemForm addItem={addTask} disabled={props.entityStatus===\"loading\"}/>\r\n\r\n                <ul style={{listStyle: \"none\", paddingLeft: \"0px\"}}>\r\n                    {\r\n                        tasksJSXElements\r\n                    }\r\n                </ul>\r\n\r\n\r\n                <div>\r\n                    <Button size={\"small\"}\r\n                            variant={props.filter === \"all\" ? \"contained\" : \"outlined\"}\r\n                            color={\"primary\"}\r\n                            onClick={onClickAllFilter}>All\r\n                    </Button>\r\n                    <Button style={{marginLeft: \"3px\"}}\r\n                            size={\"small\"}\r\n                            variant={props.filter === \"active\" ? \"contained\" : \"outlined\"}\r\n                            color={\"primary\"}\r\n                            onClick={onClickActiveFilter}>Active\r\n                    </Button>\r\n                    <Button size={\"small\"}\r\n                            variant={props.filter === \"completed\" ? \"contained\" : \"outlined\"}\r\n                            color={\"primary\"}\r\n                            onClick={onClickACompletedFilter}>Completed\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n)\r\n// let taskForTodolist = props.tasks;\r\n// if(props.filter === \"active\") {\r\n//     taskForTodolist = taskForTodolist.filter(t => !t.isDone)\r\n// }\r\n// if(props.filter === \"completed\") {\r\n//     taskForTodolist = taskForTodolist.filter(t => t.isDone)\r\n// }\r\n// const getTasksForTodoList = () => {\r\n//     switch (props.filter) {\r\n//         case \"active\":\r\n//             return props.tasks.filter((t) => !t.isDone)\r\n//         case \"completed\":\r\n//             return props.tasks.filter((t) => t.isDone)\r\n//         default:\r\n//             return props.tasks\r\n//     }\r\n// }\r\n//\r\n// let newTasks = getTasksForTodoList()\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodoListTitleTC,\r\n    fetchTodolistTC,\r\n    FilterValuesType,\r\n    removeTodoListTC,\r\n    TodolistDomainType\r\n} from \"./todolists-reducer\";\r\nimport {addTaskTC, removeTaskTC, updateTaskTC} from \"./tasks-reducer\";\r\nimport {TaskStatuses} from \"../../api/todolists-api\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport AddItemForm from \"../../components/AddItemForm/AddItemForm\";\r\nimport {TaskStateType} from \"../../app/App\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n    const todoList = useSelector<AppRootStateType, TodolistDomainType[]>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return;\r\n        }\r\n        dispatch(fetchTodolistTC())\r\n    }, [])\r\n\r\n    console.log(tasks)\r\n\r\n\r\n    //tasks\r\n    const changeTaskTitle = useCallback((taskId: string, newTitle: string, todoListID: string) => {\r\n        dispatch(updateTaskTC(taskId, {title: newTitle}, todoListID))\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todoListID: string) => {\r\n        dispatch(addTaskTC(title, todoListID))\r\n    }, [dispatch])\r\n\r\n    const changeTaskStatus = useCallback((taskId: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskTC(taskId, {status}, todolistId))\r\n    }, [dispatch])\r\n\r\n    const removeTask = useCallback((taskID: string, todoListID: string) => {\r\n        dispatch(removeTaskTC(taskID, todoListID))\r\n    }, [dispatch])\r\n\r\n//todolist\r\n    const changeFilter = useCallback((value: FilterValuesType, todoListID: string) => {\r\n        dispatch(changeTodolistFilterAC(value, todoListID))\r\n    }, [dispatch])\r\n\r\n    const removeTodoList = useCallback((todoListID: string) => {\r\n        let action = removeTodoListTC(todoListID)\r\n        // dispatchToTasks(action)\r\n        dispatch(action)\r\n\r\n    }, [dispatch])\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        let action = addTodolistTC(title)\r\n        dispatch(action)\r\n\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((title: string, todoListID: string) => {\r\n        dispatch(changeTodoListTitleTC(title, todoListID))\r\n    }, [dispatch])\r\n\r\n\r\n    const todolistComponents = todoList.map(\r\n        tl => {\r\n            return (\r\n                <Grid item key={tl.id}>\r\n                    <Paper elevation={5} style={{padding: \"20px\"}}>\r\n                        <Todolist\r\n                            entityStatus={tl.entityStatus}\r\n                            todoListID={tl.id}\r\n                            removeTask={removeTask}\r\n                            filter={tl.filter}\r\n                            tasks={tasks[tl.id]}\r\n                            title={tl.title}\r\n                            changeFilter={changeFilter}\r\n                            addTask={addTask}\r\n                            changeTaskStatus={changeTaskStatus}\r\n                            removeTodoList={removeTodoList}\r\n                            changeTaskTitle={changeTaskTitle}\r\n                            changeTodolistTitle={changeTodolistTitle}\r\n                        />\r\n                    </Paper>\r\n                </Grid>\r\n            )\r\n        }\r\n    )\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    return <>\r\n        <Grid container style={{padding: \"20px 0px\"}}>\r\n            <AddItemForm addItem={addTodoList}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {todolistComponents\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n    const [open, setOpen] = React.useState(true)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        setOpen(false)\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 4) {\r\n                errors.password = 'Must be more than 4 characters';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            //alert(JSON.stringify(values));\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n\r\n                        />\r\n                        {formik.errors.email && formik.touched.email &&\r\n                        <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n\r\n\r\n                        />\r\n                        {formik.touched.email && formik.errors.password &&\r\n                        <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                name={\"rememberMe\"}\r\n                                onChange={formik.handleChange}\r\n                                value={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {AppBar, Button, CircularProgress, Container, IconButton, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {TaskType} from \"../api/todolists-api\";\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistList\";\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Route, Switch, Redirect} from \"react-router-dom\";\r\nimport {loginTC, logoutTC} from \"../features/Login/auth-reducer\";\r\n\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n\r\n}\r\n\r\nfunction App() {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const dispatch = useDispatch()\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position={\"static\"}>\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton color={\"inherit\"}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={\"h6\"}>\r\n                        Todolists\r\n                    </Typography>\r\n                    {isLoggedIn && <Button variant={\"outlined\"} onClick={logoutHandler}\r\n                                           color={\"inherit\"}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === \"loading\" && <LinearProgress color={\"secondary\"}/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistsList/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n\r\n            </Container>\r\n        </div>)\r\n}\r\n\r\n\r\nexport default App;\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {tasksReducer} from \"../features/TodolistsList/tasks-reducer\";\r\nimport {todoListsReducer} from \"../features/TodolistsList/todolists-reducer\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\n\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todoListsReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\n// непосредственно создаём state\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к state в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./app/App\";\r\nimport {Provider} from 'react-redux';\r\n\r\nimport {store} from \"./app/store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n        <App/>\r\n        </HashRouter>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}