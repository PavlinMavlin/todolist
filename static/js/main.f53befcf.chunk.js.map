{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditTableSpan.tsx","Task.tsx","Todolist.tsx","store/todolists-reducer.ts","store/tasks-reducer.ts","AppWithRedux.tsx","store/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","key","helperText","label","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","changeTitle","onDoubleClick","Task","task","todoListID","removeTask","changeTaskTitle","changeTaskStatus","onClickHandler","useCallback","id","onChangeHandler","checked","onTitleChangeHandler","className","isDone","Checkbox","Delete","Todolist","filter","tasks","t","getTasksForTodoList","tasksJSXElements","map","onClickAllFilter","changeFilter","onClickActiveFilter","onClickACompletedFilter","addTask","changeTodolistTitle","removeTodoList","style","listStyle","paddingLeft","Button","size","marginLeft","initialState","AppWithRedux","todoList","useSelector","state","todolists","dispatch","useDispatch","taskId","newTitle","type","todolistId","taskID","addTaskAC","changeTaskStatusAC","removeTaskAC","ChangeTodolistFilterAC","action","RemoveTodoListAC","addTodoList","v1","AddTodoListAC","ChangeTodolistTitleAC","todolistComponents","tl","Grid","item","Paper","elevation","padding","AppBar","position","Toolbar","justifyContent","Menu","Typography","Container","fixed","container","spacing","rootReducer","combineReducers","copyState","newTodolist","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f53befcf.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n\r\n    console.log(\"AddItemForm called\")\r\n\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n\r\n    }\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n\r\n        if (e.key === \"Enter\") {\r\n            addItem()\r\n        }\r\n    }\r\n    // const errorMessage = error ? <div style={{color: \"red\"}}>Title is required</div> : null\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={\"outlined\"}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                helperText={error}\r\n                label={\"Title\"}\r\n                error={!!error}\r\n            />\r\n            <IconButton color={\"primary\"} onClick={addItem}>\r\n                <AddBox/>\r\n            </IconButton>\r\n            {/*{errorMessage}*/}\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default AddItemForm","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype EditableSpan = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpan) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                color={\"primary\"}\r\n                variant={\"standard\"}\r\n                value={title}\r\n                onChange={onChangeTitle} autoFocus\r\n                onBlur={offEditMode}/>\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n})\r\n\r\n","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskType} from \"./AppWithRedux\";\r\nimport {EditableSpan} from \"./EditTableSpan\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    removeTask: (taskId: string, todoListID: string) => void\r\n    todoListID: string\r\n    changeTaskStatus: (taskId: string, newIsDoneValue: boolean, todoListID: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todoListID: string) => void\r\n}\r\n\r\nexport const Task = React.memo(({task, todoListID, removeTask, changeTaskTitle, changeTaskStatus}: TaskPropsType) => {\r\n\r\n    const onClickHandler = useCallback(() => {\r\n        removeTask(task.id, todoListID)\r\n    }, [removeTask, task, todoListID])\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => changeTaskStatus(task.id, e.currentTarget.checked, todoListID), [changeTaskStatus, task, todoListID])\r\n    const onTitleChangeHandler = useCallback((title: string) =>\r\n        changeTaskTitle(task.id, title, todoListID), [changeTaskTitle, task, todoListID])\r\n\r\n    return (\r\n\r\n        <div key={task.id}>\r\n                 <span className={task.isDone ? \"is-done\" : \"\"}>\r\n                <Checkbox\r\n                    color={\"primary\"}\r\n                    checked={task.isDone}\r\n                    onChange={onChangeHandler}\r\n                /><EditableSpan title={task.title} changeTitle={onTitleChangeHandler}/>\r\n                 </span>\r\n            <IconButton\r\n                onClick={onClickHandler}\r\n            ><Delete/></IconButton>\r\n        </div>)\r\n})","import React, {useCallback} from \"react\";\r\nimport {FilterValuesType, TaskType} from \"./App\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditTableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task\";\r\n\r\n\r\nexport type PropsTypeTodolist = {\r\n    todoListID: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    removeTask: (taskId: string, todoListID: string) => void\r\n    changeFilter: (value: FilterValuesType, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeTodolistTitle: (title: string, todoListID: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todoListID: string) => void\r\n    changeTaskStatus: (taskId: string, newIsDoneValue: boolean, todoListID: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsTypeTodolist) => {\r\n\r\n        console.log(\"Todolist called\")\r\n\r\n        const getTasksForTodoList = () => {\r\n    switch (props.filter) {\r\n        case \"active\":\r\n            return props.tasks.filter((t) => !t.isDone)\r\n        case \"completed\":\r\n            return props.tasks.filter((t) => t.isDone)\r\n        default:\r\n            return props.tasks\r\n    }\r\n}\r\n\r\nlet newTasks = getTasksForTodoList()\r\n\r\n        const tasksJSXElements = props.tasks.map(t => {\r\n\r\n\r\n            return (\r\n                <Task key={t.id}\r\n                      task={t}\r\n                      todoListID={props.todoListID}\r\n                      changeTaskStatus={props.changeTaskStatus}\r\n                      changeTaskTitle={props.changeTaskTitle}\r\n                      removeTask={props.removeTask}\r\n                />)\r\n        })\r\n\r\n        const onClickAllFilter = useCallback(() => props.changeFilter(\"all\", props.todoListID), [props.changeFilter, props.todoListID])\r\n        const onClickActiveFilter = useCallback(() => props.changeFilter(\"active\", props.todoListID), [props.changeFilter, props.todoListID])\r\n        const onClickACompletedFilter = useCallback(() => props.changeFilter(\"completed\", props.todoListID), [props.changeFilter, props.todoListID])\r\n\r\n        const OnclickRemoveTodoList = () => props.removeTodoList(props.todoListID)\r\n\r\n        const addTask = useCallback((title: string) => {\r\n            props.addTask(title, props.todoListID)\r\n        }, [props.addTask, props.todoListID])\r\n\r\n        const changeTodolistTitle = useCallback((title: string) => props.changeTodolistTitle(title, props.todoListID), [props.changeTodolistTitle, props.todoListID])\r\n\r\n        return (\r\n\r\n            <div>\r\n                <h3>\r\n                    <EditableSpan title={props.title} changeTitle={changeTodolistTitle}/>\r\n                    <IconButton\r\n                        onClick={OnclickRemoveTodoList} color={\"secondary\"}>\r\n                        <Delete/>\r\n                    </IconButton>\r\n                </h3>\r\n                <AddItemForm addItem={addTask}/>\r\n\r\n                <ul style={{listStyle: \"none\", paddingLeft: \"0px\"}}>\r\n                    {\r\n                        tasksJSXElements\r\n                    }\r\n                </ul>\r\n\r\n\r\n                <div>\r\n                    <Button size={\"small\"}\r\n                            variant={props.filter === \"all\" ? \"contained\" : \"outlined\"}\r\n                            color={\"primary\"}\r\n                            onClick={onClickAllFilter}>All\r\n                    </Button>\r\n                    <Button style={{marginLeft: \"3px\"}}\r\n                            size={\"small\"}\r\n                            variant={props.filter === \"active\" ? \"contained\" : \"outlined\"}\r\n                            color={\"primary\"}\r\n                            onClick={onClickActiveFilter}>Active\r\n                    </Button>\r\n                    <Button size={\"small\"}\r\n                            variant={props.filter === \"completed\" ? \"contained\" : \"outlined\"}\r\n                            color={\"primary\"}\r\n                            onClick={onClickACompletedFilter}>Completed\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n)\r\n// let taskForTodolist = props.tasks;\r\n// if(props.filter === \"active\") {\r\n//     taskForTodolist = taskForTodolist.filter(t => !t.isDone)\r\n// }\r\n// if(props.filter === \"completed\") {\r\n//     taskForTodolist = taskForTodolist.filter(t => t.isDone)\r\n// }\r\n// const getTasksForTodoList = () => {\r\n//     switch (props.filter) {\r\n//         case \"active\":\r\n//             return props.tasks.filter((t) => !t.isDone)\r\n//         case \"completed\":\r\n//             return props.tasks.filter((t) => t.isDone)\r\n//         default:\r\n//             return props.tasks\r\n//     }\r\n// }\r\n//\r\n// let newTasks = getTasksForTodoList()\r\n\r\n\r\n","import {FilterValuesType, TaskStateType, TodolistType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\ntype RemoveTodolistActionType = {\r\n    type: \"REMOVE-TODOLIST\"\r\n    todoListID: string\r\n}\r\ntype AddTodolistActionType = {\r\n    type: \"ADD-TODOLIST\"\r\n    title: string\r\n    todoListID: string\r\n}\r\ntype ChangeTodolistTitleActionType = {\r\n    type: \"CHANGE-TODOLIST-TITLE\"\r\n    title: string\r\n    todoListID: string\r\n}\r\ntype ChangeTodolistFilterActionType = {\r\n    type: \"CHANGE-TODOLIST-FILTER\"\r\n    filter: FilterValuesType\r\n    todoListID: string\r\n}\r\n\r\nexport type ActionType =\r\n    RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n\r\nlet initialState: Array<TodolistType> = []\r\n\r\n\r\nexport const todoListsReducer = (state = initialState, action: ActionType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TODOLIST\":\r\n            return state.filter(tl => tl.id !== action.todoListID)\r\n        case \"ADD-TODOLIST\":\r\n            const newTodolist: TodolistType = {id: action.todoListID, title: action.title, filter: \"all\"}\r\n            return [...state, newTodolist]\r\n        case \"CHANGE-TODOLIST-TITLE\":\r\n            return state.map(tl => tl.id === action.todoListID ? {...tl, title: action.title} : tl)\r\n        case \"CHANGE-TODOLIST-FILTER\":\r\n            return state.map(tl => tl.id === action.todoListID ? {...tl, filter: action.filter} : tl)\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const RemoveTodoListAC = (todoListID: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', todoListID}\r\n}\r\nexport const AddTodoListAC = (title: string): AddTodolistActionType => {\r\n    return {type: \"ADD-TODOLIST\", title: title, todoListID: v1()}\r\n}\r\nexport const ChangeTodolistTitleAC = (title: string, todoListID: string): ChangeTodolistTitleActionType => {\r\n    return {type: \"CHANGE-TODOLIST-TITLE\", title: title, todoListID: todoListID}\r\n}\r\n\r\nexport const ChangeTodolistFilterAC = (filter: FilterValuesType, todoListID: string): ChangeTodolistFilterActionType => {\r\n    return {type: \"CHANGE-TODOLIST-FILTER\", filter: filter, todoListID: todoListID}\r\n}","import {TaskStateType, TaskType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\n\r\ntype RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    todolistId: string\r\n    taskID: string\r\n}\r\ntype AddTaskActionType = {\r\n    type: \"ADD-TASK\"\r\n    title: string\r\n    todolistId: string\r\n}\r\ntype ChangeTaskStatusActionType = {\r\n    type: \"CHANGE-TASK-STATUS\"\r\n    isDone: boolean\r\n    todolistId: string\r\n    taskID: string\r\n}\r\ntype ChangeTaskTitleActionType = {\r\n    type: \"CHANGE-TASK-TITLE\"\r\n    title: string\r\n    todolistId: string\r\n    taskID: string\r\n}\r\ntype AddTodolistActionType = {\r\n    type: \"ADD-TODOLIST\"\r\n    title: string\r\n    todoListID: string\r\n}\r\ntype  RemoveTodolistActionType = {\r\n    todolistId: string\r\n    type: \"REMOVE-TODOLIST\"\r\n}\r\nexport type ActionType =\r\n    RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n\r\nlet initialState: TaskStateType = {}\r\n\r\n\r\nexport const tasksReducer = (state = initialState, action: ActionType): TaskStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskID)\r\n            }\r\n        case \"ADD-TASK\":\r\n            let task: TaskType = {id: v1(), isDone: false, title: action.title}\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: [task, ...state[action.todolistId]]\r\n            }\r\n        case \"CHANGE-TASK-STATUS\":\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskID ? {\r\n                    ...t,\r\n                    isDone: action.isDone\r\n                } : t)\r\n\r\n            }\r\n\r\n        case \"CHANGE-TASK-TITLE\" : {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskID ? {\r\n                    ...t,\r\n                    title: action.title\r\n                } : t)\r\n\r\n            }\r\n\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            return {\r\n                ...state,\r\n                [action.todoListID]: []\r\n            }\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            let copyState = {...state}\r\n            delete copyState[action.todolistId]\r\n            return copyState\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const removeTaskAC = (taskID: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskID, todolistId}\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\r\n    return {type: \"ADD-TASK\", title, todolistId}\r\n}\r\nexport const changeTaskStatusAC = (taskID: string, isDone: boolean, todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: \"CHANGE-TASK-STATUS\", taskID, isDone, todolistId}\r\n}\r\n\r\nexport const changeTaskTitleAC = (taskID: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: \"CHANGE-TASK-TITLE\", title, todolistId, taskID}\r\n}\r\nexport const RemoveTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return {type: \"REMOVE-TODOLIST\", todolistId}\r\n}\r\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from \"./Todolist\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    AddTodoListAC,\r\n    ChangeTodolistFilterAC,\r\n    ChangeTodolistTitleAC,\r\n    RemoveTodoListAC\r\n} from \"./store/todolists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./store/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store/store\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\nexport type TodolistType = {\r\n    id: string,\r\n    title: string,\r\n    filter: FilterValuesType\r\n\r\n}\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const todoList = useSelector<AppRootStateType, TodolistType[]>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    //tasks\r\n    const changeTaskTitle = useCallback((taskId: string, newTitle: string, todoListID: string) => {\r\n        dispatch(changeTaskTitleAC(taskId, newTitle, todoListID))\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todoListID: string) => {\r\n        dispatch(addTaskAC(title, todoListID))\r\n    }, [dispatch])\r\n\r\n    const changeTaskStatus = useCallback((taskId: string, isDone: boolean, todolistId: string) => {\r\n        dispatch(changeTaskStatusAC(taskId, isDone, todolistId))\r\n    }, [dispatch])\r\n\r\n    const removeTask = useCallback((taskID: string, todoListID: string) => {\r\n        dispatch(removeTaskAC(taskID, todoListID))\r\n    }, [dispatch])\r\n\r\n//todolist\r\n    const changeFilter = useCallback((value: FilterValuesType, todoListID: string) => {\r\n        dispatch(ChangeTodolistFilterAC(value, todoListID))\r\n    }, [dispatch])\r\n\r\n    const removeTodoList = useCallback((todoListID: string) => {\r\n        let action = RemoveTodoListAC(todoListID)\r\n        // dispatchToTasks(action)\r\n        dispatch(action)\r\n\r\n    }, [dispatch])\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        let action = AddTodoListAC(title)\r\n        dispatch(action)\r\n\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((title: string, todoListID: string) => {\r\n        dispatch(ChangeTodolistTitleAC(title, todoListID))\r\n    }, [dispatch])\r\n\r\n\r\n    const todolistComponents = todoList.map(\r\n        tl => {\r\n            return (\r\n                <Grid item key={tl.id}>\r\n                    <Paper elevation={5} style={{padding: \"20px\"}}>\r\n                        <Todolist\r\n                            todoListID={tl.id}\r\n                            removeTask={removeTask}\r\n                            filter={tl.filter}\r\n                            tasks={tasks[tl.id]}\r\n                            title={tl.title}\r\n                            changeFilter={changeFilter}\r\n                            addTask={addTask}\r\n                            changeTaskStatus={changeTaskStatus}\r\n                            removeTodoList={removeTodoList}\r\n                            changeTaskTitle={changeTaskTitle}\r\n                            changeTodolistTitle={changeTodolistTitle}\r\n                        />\r\n                    </Paper>\r\n                </Grid>\r\n            )\r\n        }\r\n    )\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position={\"static\"}>\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton color={\"inherit\"}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={\"h6\"}>\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button variant={\"outlined\"}\r\n                            color={\"inherit\"}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px 0px\"}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todolistComponents}\r\n                </Grid>\r\n            </Container>\r\n        </div>)\r\n}\r\n\r\nexport default AppWithRedux;\r\n","\r\nimport {tasksReducer} from './tasks-reducer';\r\nimport {todoListsReducer} from './todolists-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todoListsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport {Provider} from 'react-redux';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {store} from \"./store/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}